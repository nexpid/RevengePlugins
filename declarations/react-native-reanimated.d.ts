// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../../../../react-native
//   ../../../../../react
//   ../../../../../react-test-renderer

declare module 'react-native-reanimated' {
	import * as Animated from 'react-native-reanimated/Animated';
	export * from 'react-native-reanimated/reanimated2';
	export default Animated;
}

declare module 'react-native-reanimated/Animated' {
	import type { Extrapolate as _Extrapolate } from 'react-native-reanimated/reanimated2/interpolateColor';
	import type { SharedValue as _SharedValue } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { DerivedValue as _DerivedValue } from 'react-native-reanimated/reanimated2/hook/useDerivedValue';
	import type { TransformStyleTypes as _TransformStyleTypes, Adaptable as _Adaptable, AdaptTransforms as _AdaptTransforms, AnimatedTransform as _AnimatedTransform, AnimateStyle as _AnimateStyle, StylesOrDefault as _StylesOrDefault, AnimateProps as _AnimateProps } from 'react-native-reanimated/reanimated2/helperTypes';
	import type { EasingFunction as _EasingFunction } from 'react-native-reanimated/reanimated2/Easing';
	import type { AnimatedScrollViewProps as _AnimatedScrollViewProps } from 'react-native-reanimated/reanimated2/component/ScrollView';
	import type { FlatListPropsWithLayout as _FlatListPropsWithLayout } from 'react-native-reanimated/reanimated2/component/FlatList';
	export { createAnimatedComponent } from 'react-native-reanimated/createAnimatedComponent';
	export { AnimatedText as Text } from 'react-native-reanimated/reanimated2/component/Text';
	export { AnimatedView as View } from 'react-native-reanimated/reanimated2/component/View';
	export { AnimatedScrollView as ScrollView } from 'react-native-reanimated/reanimated2/component/ScrollView';
	export { AnimatedImage as Image } from 'react-native-reanimated/reanimated2/component/Image';
	export { ReanimatedFlatList as FlatList } from 'react-native-reanimated/reanimated2/component/FlatList';
	export { addWhitelistedNativeProps, addWhitelistedUIProps, } from 'react-native-reanimated/ConfigHelper';
	/**
		* @deprecated Please import `Extrapolate` directly from `react-native-reanimated` instead of `Animated` namespace.
		*/
	export type Extrapolate = typeof _Extrapolate;
	/**
		* @deprecated Please import `SharedValue` directly from `react-native-reanimated` instead of `Animated` namespace.
		*/
	export type SharedValue<T> = _SharedValue<T>;
	/**
		* @deprecated Please import `DerivedValue` directly from `react-native-reanimated` instead of `Animated` namespace.
		*/
	export type DerivedValue<T> = _DerivedValue<T>;
	/**
		* @deprecated Please import `Adaptable` directly from `react-native-reanimated` instead of `Animated` namespace.
		*/
	export type Adaptable<T> = _Adaptable<T>;
	/**
		* @deprecated Please import `TransformStyleTypes` directly from `react-native-reanimated` instead of `Animated` namespace.
		* */
	export type TransformStyleTypes = _TransformStyleTypes;
	/**
		* @deprecated Please import `AdaptTransforms` directly from `react-native-reanimated` instead of `Animated` namespace.
		* */
	export type AdaptTransforms<T> = _AdaptTransforms<T>;
	/**
		* @deprecated Please import `AnimatedTransform` directly from `react-native-reanimated` instead of `Animated` namespace.
		*/
	export type AnimatedTransform = _AnimatedTransform;
	/**
		* @deprecated Please import `AnimateStyle` directly from `react-native-reanimated` instead of `Animated` namespace.
		* */
	export type AnimateStyle<S> = _AnimateStyle<S>;
	/**
		* @deprecated Please import `StylesOrDefault` directly from `react-native-reanimated` instead of `Animated` namespace.
		* */
	export type StylesOrDefault<S> = _StylesOrDefault<S>;
	/**
		* @deprecated Please import `AnimateProps` directly from `react-native-reanimated` instead of `Animated` namespace.
		* */
	export type AnimateProps<P extends object> = _AnimateProps<P>;
	/**
		* @deprecated Please import `EasingFunction` directly from `react-native-reanimated` instead of `Animated` namespace.
		* */
	export type EasingFunction = _EasingFunction;
	/**
		* @deprecated Please import `AnimatedScrollViewProps` directly from `react-native-reanimated` instead of `Animated` namespace.
		* */
	export type AnimatedScrollViewProps = _AnimatedScrollViewProps;
	/**
		* @deprecated Please import `FlatListPropsWithLayout` directly from `react-native-reanimated` instead of `Animated` namespace.
		* */
	export type FlatListPropsWithLayout<T> = _FlatListPropsWithLayout<T>;
}

declare module 'react-native-reanimated/reanimated2' {
	import './publicGlobals';
	export type { WorkletRuntime } from 'react-native-reanimated/reanimated2/core';
	export { runOnJS, runOnUI, createWorkletRuntime, runOnRuntime, makeMutable, makeShareableCloneRecursive, isReanimated3, isConfigured, enableLayoutAnimations, getViewProp, executeOnUIRuntimeSync, } from 'react-native-reanimated/reanimated2/core';
	export type { GestureHandlers, AnimatedRef, DerivedValue, ScrollHandler, ScrollHandlers, ScrollHandlerProcessed, FrameCallback, ScrollEvent, EventHandler, EventHandlerProcessed, UseHandlerContext, ReanimatedEvent, } from 'react-native-reanimated/reanimated2/hook';
	export { useAnimatedProps, useEvent, useHandler, useWorkletCallback, useSharedValue, useReducedMotion, useAnimatedStyle, useAnimatedGestureHandler, useAnimatedReaction, useAnimatedRef, useAnimatedScrollHandler, useDerivedValue, useAnimatedSensor, useFrameCallback, useAnimatedKeyboard, useScrollViewOffset, } from 'react-native-reanimated/reanimated2/hook';
	export type { DelayAnimation, RepeatAnimation, SequenceAnimation, StyleLayoutAnimation, WithTimingConfig, TimingAnimation, WithSpringConfig, SpringAnimation, WithDecayConfig, DecayAnimation, } from 'react-native-reanimated/reanimated2/animation';
	export { cancelAnimation, defineAnimation, withClamp, withDecay, withDelay, withRepeat, withSequence, withSpring, withTiming, } from 'react-native-reanimated/reanimated2/animation';
	export type { ExtrapolationConfig, ExtrapolationType } from 'react-native-reanimated/reanimated2/interpolation';
	export { Extrapolation, interpolate, clamp } from 'react-native-reanimated/reanimated2/interpolation';
	export type { InterpolationOptions, InterpolateConfig, InterpolateRGB, InterpolateHSV, } from 'react-native-reanimated/reanimated2/interpolateColor';
	export { 
	/**
	  * @deprecated Please use {@link Extrapolation} instead.
	  */
	Extrapolate, ColorSpace, interpolateColor, useInterpolateConfig, } from './interpolateColor';
	export type { EasingFunction, EasingFn, EasingFunctionFactory, EasingFactoryFn, } from 'react-native-reanimated/reanimated2/Easing';
	export { Easing } from 'react-native-reanimated/reanimated2/Easing';
	export type { ComponentCoords } from 'react-native-reanimated/reanimated2/platformFunctions';
	export { measure, dispatchCommand, scrollTo, setGestureState, setNativeProps, getRelativeCoords, } from 'react-native-reanimated/reanimated2/platformFunctions';
	export type { ParsedColorArray } from 'react-native-reanimated/reanimated2/Colors';
	export { isColor, processColor, convertToRGBA } from 'react-native-reanimated/reanimated2/Colors';
	export { createAnimatedPropAdapter } from 'react-native-reanimated/reanimated2/PropAdapters';
	export type { LayoutAnimation, EntryAnimationsValues, ExitAnimationsValues, EntryExitAnimationFunction, LayoutAnimationsValues, LayoutAnimationFunction, ILayoutAnimationBuilder, IEntryExitAnimationBuilder, } from 'react-native-reanimated/reanimated2/layoutReanimation';
	export { BaseAnimationBuilder, ComplexAnimationBuilder, Keyframe, FlipInXUp, FlipInYLeft, FlipInXDown, FlipInYRight, FlipInEasyX, FlipInEasyY, FlipOutXUp, FlipOutYLeft, FlipOutXDown, FlipOutYRight, FlipOutEasyX, FlipOutEasyY, StretchInX, StretchInY, StretchOutX, StretchOutY, FadeIn, FadeInRight, FadeInLeft, FadeInUp, FadeInDown, FadeOut, FadeOutRight, FadeOutLeft, FadeOutUp, FadeOutDown, SlideInRight, SlideInLeft, SlideOutRight, SlideOutLeft, SlideInUp, SlideInDown, SlideOutUp, SlideOutDown, ZoomIn, ZoomInRotate, ZoomInLeft, ZoomInRight, ZoomInUp, ZoomInDown, ZoomInEasyUp, ZoomInEasyDown, ZoomOut, ZoomOutRotate, ZoomOutLeft, ZoomOutRight, ZoomOutUp, ZoomOutDown, ZoomOutEasyUp, ZoomOutEasyDown, BounceIn, BounceInDown, BounceInUp, BounceInLeft, BounceInRight, BounceOut, BounceOutDown, BounceOutUp, BounceOutLeft, BounceOutRight, LightSpeedInRight, LightSpeedInLeft, LightSpeedOutRight, LightSpeedOutLeft, PinwheelIn, PinwheelOut, RotateInDownLeft, RotateInDownRight, RotateInUpLeft, RotateInUpRight, RotateOutDownLeft, RotateOutDownRight, RotateOutUpLeft, RotateOutUpRight, RollInLeft, RollInRight, RollOutLeft, RollOutRight, Layout, LinearTransition, FadingTransition, SequencedTransition, JumpingTransition, CurvedTransition, EntryExitTransition, combineTransition, SharedTransition, SharedTransitionType, } from 'react-native-reanimated/reanimated2/layoutReanimation';
	export { isSharedValue } from 'react-native-reanimated/reanimated2/isSharedValue';
	export type { StyleProps, SharedValue, AnimatableValueObject, AnimatableValue, AnimationObject, SensorConfig, Animation, AnimatedSensor, AnimationCallback, Value3D, ValueRotation, AnimatedKeyboardInfo, AnimatedKeyboardOptions, MeasuredDimensions, } from 'react-native-reanimated/reanimated2/commonTypes';
	export { SensorType, IOSReferenceFrame, InterfaceOrientation, KeyboardState, ReduceMotion, isWorkletFunction, } from 'react-native-reanimated/reanimated2/commonTypes';
	export type { FrameInfo } from 'react-native-reanimated/reanimated2/frameCallback';
	export { getUseOfValueInStyleWarning } from 'react-native-reanimated/reanimated2/pluginUtils';
	export { withReanimatedTimer, advanceAnimationByTime, advanceAnimationByFrame, setUpTests, getAnimatedStyle, } from 'react-native-reanimated/reanimated2/jestUtils';
	export { LayoutAnimationConfig } from 'react-native-reanimated/reanimated2/component/LayoutAnimationConfig';
	export { PerformanceMonitor } from 'react-native-reanimated/reanimated2/component/PerformanceMonitor';
	export type { Adaptable, AdaptTransforms, AnimateProps, AnimatedProps, AnimatedTransform, TransformStyleTypes, TransformArrayItem, AnimateStyle, AnimatedStyle, AnimatedStyleProp, StylesOrDefault, } from 'react-native-reanimated/reanimated2/helperTypes';
	export type { AnimatedScrollViewProps } from 'react-native-reanimated/reanimated2/component/ScrollView';
	export type { FlatListPropsWithLayout } from 'react-native-reanimated/reanimated2/component/FlatList';
	export { startMapper, stopMapper } from 'react-native-reanimated/reanimated2/mappers';
	export { startScreenTransition, finishScreenTransition, ScreenTransition, } from 'react-native-reanimated/reanimated2/screenTransition';
	export type { AnimatedScreenTransition, GoBackGesture, ScreenTransitionConfig, } from 'react-native-reanimated/reanimated2/screenTransition';
}

declare module 'react-native-reanimated/reanimated2/interpolateColor' {
	import { Extrapolation } from 'react-native-reanimated/reanimated2/interpolation';
	import type { SharedValue } from 'react-native-reanimated/reanimated2/commonTypes';
	/**
		* @deprecated Please use Extrapolation instead
		*/
	export const Extrapolate: typeof Extrapolation;
	/**
		* Options for color interpolation.
		*
		* @param gamma - Gamma value used in gamma correction. Defaults to `2.2`.
		* @param useCorrectedHSVInterpolation - Whether to reduce the number of colors the interpolation has to go through. Defaults to `true`.
		*/
	export type InterpolationOptions = {
			gamma?: number;
			useCorrectedHSVInterpolation?: boolean;
	};
	export interface InterpolateRGB {
			r: number[];
			g: number[];
			b: number[];
			a: number[];
	}
	export interface InterpolateHSV {
			h: number[];
			s: number[];
			v: number[];
			a: number[];
	}
	/**
		* Lets you map a value from a range of numbers to a range of colors using linear interpolation.
		*
		* @param value - A number from the `input` range that is going to be mapped to the color in the `output` range.
		* @param inputRange - An array of numbers specifying the input range of the interpolation.
		* @param outputRange - An array of output colors values (eg. "red", "#00FFCC", "rgba(255, 0, 0, 0.5)").
		* @param colorSpace - The color space to use for interpolation. Defaults to 'RGB'.
		* @param options - Additional options for interpolation - {@link InterpolationOptions}.
		* @returns The color after interpolation from within the output range in rgba(r, g, b, a) format.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolateColor
		*/
	export function interpolateColor(value: number, inputRange: readonly number[], outputRange: readonly string[], colorSpace?: 'RGB' | 'HSV', options?: InterpolationOptions): string;
	export function interpolateColor(value: number, inputRange: readonly number[], outputRange: readonly number[], colorSpace?: 'RGB' | 'HSV', options?: InterpolationOptions): number;
	export enum ColorSpace {
			RGB = 0,
			HSV = 1
	}
	export interface InterpolateConfig {
			inputRange: readonly number[];
			outputRange: readonly (string | number)[];
			colorSpace: ColorSpace;
			cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;
			options: InterpolationOptions;
	}
	export function useInterpolateConfig(inputRange: readonly number[], outputRange: readonly (string | number)[], colorSpace?: ColorSpace, options?: InterpolationOptions): SharedValue<InterpolateConfig>;
}

declare module 'react-native-reanimated/reanimated2/commonTypes' {
	import type { ViewStyle, TextStyle } from 'react-native';
	export type RequiredKeys<T, K extends keyof T> = T & Required<Pick<T, K>>;
	export interface StyleProps extends ViewStyle, TextStyle {
			originX?: number;
			originY?: number;
			[key: string]: any;
	}
	/**
		* A value that can be used both on the [JavaScript thread](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#javascript-thread) and the [UI thread](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#ui-thread).
		*
		* Shared values are defined using [useSharedValue](https://docs.swmansion.com/react-native-reanimated/docs/core/useSharedValue) hook. You access and modify shared values by their `.value` property.
		*/
	export interface SharedValue<Value = unknown> {
			value: Value;
			addListener: (listenerID: number, listener: (value: Value) => void) => void;
			removeListener: (listenerID: number) => void;
			modify: (modifier?: <T extends Value>(value: T) => T, forceUpdate?: boolean) => void;
	}
	export interface Mutable<Value = unknown> extends SharedValue<Value> {
			_isReanimatedSharedValue: true;
			_animation?: AnimationObject<Value> | null;
			_value: Value;
	}
	export type ShareableRef<T = unknown> = {
			__hostObjectShareableJSRef: T;
	};
	export type FlatShareableRef<T> = T extends ShareableRef<infer U> ? ShareableRef<U> : ShareableRef<T>;
	export type MapperRawInputs = unknown[];
	export type MapperOutputs = SharedValue[];
	export type MapperRegistry = {
			start: (mapperID: number, worklet: () => void, inputs: MapperRawInputs, outputs?: MapperOutputs) => void;
			stop: (mapperID: number) => void;
	};
	export type WorkletStackDetails = [
			error: Error,
			lineOffset: number,
			columnOffset: number
	];
	type WorkletClosure = Record<string, unknown>;
	interface WorkletInitDataCommon {
			code: string;
	}
	type WorkletInitDataRelease = WorkletInitDataCommon;
	interface WorkletInitDataDev extends WorkletInitDataCommon {
			location: string;
			sourceMap: string;
			version: string;
	}
	interface WorkletBaseCommon {
			__closure: WorkletClosure;
			__workletHash: number;
	}
	interface WorkletBaseRelease extends WorkletBaseCommon {
			__initData: WorkletInitDataRelease;
	}
	interface WorkletBaseDev extends WorkletBaseCommon {
			__initData: WorkletInitDataDev;
			/**
				* `__stackDetails` is removed after parsing.
				*/
			__stackDetails?: WorkletStackDetails;
	}
	export type WorkletFunction<Args extends unknown[] = unknown[], ReturnValue = unknown> = ((...args: Args) => ReturnValue) & (WorkletBaseRelease | WorkletBaseDev);
	/**
		* This function allows you to determine if a given function is a worklet. It only works
		* with Reanimated Babel plugin enabled. Unless you are doing something with internals of
		* Reanimated you shouldn't need to use this function.
		*
		* ### Note
		* Do not call it before the worklet is declared, as it will always return false then. E.g.:
		*
		* ```ts
		* isWorkletFunction(myWorklet); // Will always return false.
		*
		* function myWorklet() {
		*   'worklet';
		* };
		* ```
		*
		* ### Maintainer note
		* This function works well on the JS thread performance-wise, since the JIT can inline it.
		* However, on other threads it will not get optimized and we will get a function call overhead.
		* We want to change it in the future, but it's not feasible at the moment.
		*/
	export function isWorkletFunction<Args extends unknown[] = unknown[], ReturnValue = unknown, BuildType extends WorkletBaseDev | WorkletBaseRelease = WorkletBaseDev>(value: unknown): value is WorkletFunction<Args, ReturnValue> & BuildType;
	export type AnimatedPropsAdapterFunction = (props: Record<string, unknown>) => void;
	export type AnimatedPropsAdapterWorklet = WorkletFunction<[
			props: Record<string, unknown>
	], void>;
	export interface NestedObject<T> {
			[key: string]: NestedObjectValues<T>;
	}
	export type NestedObjectValues<T> = T | Array<NestedObjectValues<T>> | NestedObject<T>;
	type Animatable = number | string | Array<number>;
	export type AnimatableValueObject = {
			[key: string]: Animatable;
	};
	export type AnimatableValue = Animatable | AnimatableValueObject;
	export interface AnimationObject<T = AnimatableValue> {
			[key: string]: any;
			callback?: AnimationCallback;
			current?: T;
			toValue?: AnimationObject<T>['current'];
			startValue?: AnimationObject<T>['current'];
			finished?: boolean;
			strippedCurrent?: number;
			cancelled?: boolean;
			reduceMotion?: boolean;
			__prefix?: string;
			__suffix?: string;
			onFrame: (animation: any, timestamp: Timestamp) => boolean;
			onStart: (nextAnimation: any, current: any, timestamp: Timestamp, previousAnimation: any) => void;
	}
	export interface Animation<T extends AnimationObject> extends AnimationObject {
			onFrame: (animation: T, timestamp: Timestamp) => boolean;
			onStart: (nextAnimation: T, current: AnimatableValue, timestamp: Timestamp, previousAnimation: Animation<any> | null | T) => void;
	}
	export enum SensorType {
			ACCELEROMETER = 1,
			GYROSCOPE = 2,
			GRAVITY = 3,
			MAGNETIC_FIELD = 4,
			ROTATION = 5
	}
	export enum IOSReferenceFrame {
			XArbitraryZVertical = 0,
			XArbitraryCorrectedZVertical = 1,
			XMagneticNorthZVertical = 2,
			XTrueNorthZVertical = 3,
			Auto = 4
	}
	export type SensorConfig = {
			interval: number | 'auto';
			adjustToInterfaceOrientation: boolean;
			iosReferenceFrame: IOSReferenceFrame;
	};
	export type AnimatedSensor<T extends Value3D | ValueRotation> = {
			sensor: SharedValue<T>;
			unregister: () => void;
			isAvailable: boolean;
			config: SensorConfig;
	};
	/**
		* A function called upon animation completion. If the animation is cancelled, the callback will receive `false` as the argument; otherwise, it will receive `true`.
		*/
	export type AnimationCallback = (finished?: boolean, current?: AnimatableValue) => void;
	export type Timestamp = number;
	export type Value3D = {
			x: number;
			y: number;
			z: number;
			interfaceOrientation: InterfaceOrientation;
	};
	export type ValueRotation = {
			qw: number;
			qx: number;
			qy: number;
			qz: number;
			yaw: number;
			pitch: number;
			roll: number;
			interfaceOrientation: InterfaceOrientation;
	};
	export enum InterfaceOrientation {
			ROTATION_0 = 0,
			ROTATION_90 = 90,
			ROTATION_180 = 180,
			ROTATION_270 = 270
	}
	export type ShadowNodeWrapper = {
			__hostObjectShadowNodeWrapper: never;
	};
	export enum KeyboardState {
			UNKNOWN = 0,
			OPENING = 1,
			OPEN = 2,
			CLOSING = 3,
			CLOSED = 4
	}
	export type AnimatedKeyboardInfo = {
			height: SharedValue<number>;
			state: SharedValue<KeyboardState>;
	};
	/**
		* @param x - A number representing X coordinate relative to the parent component.
		* @param y - A number representing Y coordinate relative to the parent component.
		* @param width - A number representing the width of the component.
		* @param height - A number representing the height of the component.
		* @param pageX - A number representing X coordinate relative to the screen.
		* @param pageY - A number representing Y coordinate relative to the screen.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/measure#returns
		*/
	export interface MeasuredDimensions {
			x: number;
			y: number;
			width: number;
			height: number;
			pageX: number;
			pageY: number;
	}
	export interface AnimatedKeyboardOptions {
			isStatusBarTranslucentAndroid?: boolean;
	}
	/**
		* @param System - If the `Reduce motion` accessibility setting is enabled on the device, disable the animation. Otherwise, enable the animation.
		* @param Always - Disable the animation.
		* @param Never - Enable the animation.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/guides/accessibility
		*/
	export enum ReduceMotion {
			System = "system",
			Always = "always",
			Never = "never"
	}
	export {};
}

declare module 'react-native-reanimated/reanimated2/hook/useDerivedValue' {
	import type { SharedValue } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { DependencyList } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	export type DerivedValue<Value> = Readonly<SharedValue<Value>>;
	/**
	  * Lets you create new shared values based on existing ones while keeping them reactive.
	  *
	  * @param updater - A function called whenever at least one of the shared values or state used in the function body changes.
	  * @param dependencies - An optional array of dependencies. Only relevant when using Reanimated without the Babel plugin on the Web.
	  * @returns A new readonly shared value based on a value returned from the updater function
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useDerivedValue
	  */
	export function useDerivedValue<Value>(updater: () => Value, dependencies?: DependencyList): DerivedValue<Value>;
}

declare module 'react-native-reanimated/reanimated2/helperTypes' {
	import type { ImageStyle, RegisteredStyle, StyleProp, TextStyle, TransformsStyle, ViewStyle } from 'react-native';
	import type { AnimatableValue, SharedValue } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/BaseAnimationBuilder';
	import type { EntryExitAnimationFunction, LayoutAnimationFunction } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import type { ReanimatedKeyframe } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/Keyframe';
	import type { SharedTransition } from 'react-native-reanimated/reanimated2/layoutReanimation/sharedTransitions';
	export type TransformArrayItem = Extract<TransformsStyle['transform'], Array<unknown>>[number];
	export type AnimatedTransform = MaybeSharedValueRecursive<TransformsStyle['transform']>;
	type MaybeSharedValue<Value> = Value | (Value extends AnimatableValue ? SharedValue<Value> : never);
	type MaybeSharedValueRecursive<Value> = Value extends (infer Item)[] ? SharedValue<Item[]> | (MaybeSharedValueRecursive<Item> | Item)[] : Value extends object ? SharedValue<Value> | {
			[Key in keyof Value]: MaybeSharedValueRecursive<Value[Key]> | Value[Key];
	} : MaybeSharedValue<Value>;
	type DefaultStyle = ViewStyle & ImageStyle & TextStyle;
	export type AnimatedStyle<Style = DefaultStyle> = Style | MaybeSharedValueRecursive<Style>;
	type EntryOrExitLayoutType = BaseAnimationBuilder | typeof BaseAnimationBuilder | EntryExitAnimationFunction | ReanimatedKeyframe;
	type PickStyleProps<Props> = Pick<Props, {
			[Key in keyof Props]-?: Key extends `${string}Style` | 'style' ? Key : never;
	}[keyof Props]>;
	type AnimatedStyleProps<Props extends object> = {
			[Key in keyof PickStyleProps<Props>]: StyleProp<AnimatedStyle<Props[Key]>>;
	};
	/**
		* Component props that are not specially handled by us.
		*/
	type RestProps<Props extends object> = {
			[K in keyof Omit<Props, keyof PickStyleProps<Props> | 'style'>]: Props[K] | SharedValue<Props[K]>;
	};
	type LayoutProps = {
			/**
				* Lets you animate the layout changes when components are added to or removed from the view hierarchy.
				*
				* You can use the predefined layout transitions (eg. `LinearTransition`, `FadingTransition`) or create your own ones.
				*
				* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/layout-transitions
				*/
			layout?: BaseAnimationBuilder | LayoutAnimationFunction | typeof BaseAnimationBuilder;
			/**
				* Lets you animate an element when it's added to or removed from the view hierarchy.
				*
				* You can use the predefined entering animations (eg. `FadeIn`, `SlideInLeft`) or create your own ones.
				*
				* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations
				*/
			entering?: EntryOrExitLayoutType;
			/**
				* Lets you animate an element when it's added to or removed from the view hierarchy.
				*
				* You can use the predefined entering animations (eg. `FadeOut`, `SlideOutRight`) or create your own ones.
				*
				* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations
				*/
			exiting?: EntryOrExitLayoutType;
	};
	type SharedTransitionProps = {
			/**
				* Lets you animate components between two navigation screens.
				*
				* Assign the same `sharedTransitionTag` to [animated components](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component) on two different navigation screens to create a shared transition.
				*
				* @see https://docs.swmansion.com/react-native-reanimated/docs/shared-element-transitions/overview
				* @experimental
				*/
			sharedTransitionTag?: string;
			/**
				* Lets you create a custom shared transition animation.
				*
				* Used alongside `SharedTransition.custom()` method.
				*
				* @see https://docs.swmansion.com/react-native-reanimated/docs/shared-element-transitions/overview
				* @experimental
				*/
			sharedTransitionStyle?: SharedTransition;
	};
	type AnimatedPropsProp<Props extends object> = RestProps<Props> & AnimatedStyleProps<Props> & LayoutProps & SharedTransitionProps;
	export type AnimatedProps<Props extends object> = RestProps<Props> & AnimatedStyleProps<Props> & LayoutProps & SharedTransitionProps & {
			/**
				* Lets you animate component props.
				*
				* @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedProps
				*/
			animatedProps?: Partial<AnimatedPropsProp<Props>>;
	};
	/**
		* @deprecated This type is no longer relevant.
		*/
	export type Adaptable<T> = T | ReadonlyArray<T | ReadonlyArray<T>> | SharedValue<T>;
	/**
		* @deprecated This type is no longer relevant.
		*/
	export type AdaptTransforms<T> = {
			[P in keyof T]: Adaptable<T[P]>;
	};
	/**
		* @deprecated Please use {@link TransformArrayItem} type instead.
		*/
	export type TransformStyleTypes = TransformArrayItem;
	/**
		* @deprecated Please use {@link AnimatedStyle} type instead.
		*/
	export type AnimateStyle<Style = DefaultStyle> = AnimatedStyle<Style>;
	/**
		* @deprecated This type is no longer relevant.
		*/
	export type StylesOrDefault<T> = 'style' extends keyof T ? MaybeSharedValueRecursive<T['style']> : Record<string, unknown>;
	/**
		* @deprecated This type is no longer relevant.
		*/
	export type AnimatedStyleProp<T> = AnimatedStyle<T> | RegisteredStyle<AnimatedStyle<T>>;
	/**
		* @deprecated Please use {@link AnimatedProps} type instead.
		*/
	export type AnimateProps<Props extends object> = AnimatedProps<Props>;
	export {};
}

declare module 'react-native-reanimated/reanimated2/Easing' {
	/**
		* The `Easing` module implements common easing functions. This module is used
		* by [Animate.timing()](docs/animate.html#timing) to convey physically
		* believable motion in animations.
		*
		* You can find a visualization of some common easing functions at
		* http://easings.net/
		*
		* ### Predefined animations
		*
		* The `Easing` module provides several predefined animations through the
		* following methods:
		*
		* - [`back`](docs/easing.html#back) provides a simple animation where the
		*   object goes slightly back before moving forward
		* - [`bounce`](docs/easing.html#bounce) provides a bouncing animation
		* - [`ease`](docs/easing.html#ease) provides a simple inertial animation
		* - [`elastic`](docs/easing.html#elastic) provides a simple spring interaction
		*
		* ### Standard functions
		*
		* Three standard easing functions are provided:
		*
		* - [`linear`](docs/easing.html#linear)
		* - [`quad`](docs/easing.html#quad)
		* - [`cubic`](docs/easing.html#cubic)
		*
		* The [`poly`](docs/easing.html#poly) function can be used to implement
		* quartic, quintic, and other higher power functions.
		*
		* ### Additional functions
		*
		* Additional mathematical functions are provided by the following methods:
		*
		* - [`bezier`](docs/easing.html#bezier) provides a cubic bezier curve
		* - [`circle`](docs/easing.html#circle) provides a circular function
		* - [`sin`](docs/easing.html#sin) provides a sinusoidal function
		* - [`exp`](docs/easing.html#exp) provides an exponential function
		*
		* The following helpers are used to modify other easing functions.
		*
		* - [`in`](docs/easing.html#in) runs an easing function forwards
		* - [`inOut`](docs/easing.html#inout) makes any easing function symmetrical
		* - [`out`](docs/easing.html#out) runs an easing function backwards
		*/
	export type EasingFunction = (t: number) => number;
	/**
		* @deprecated Please use {@link EasingFunction} type instead.
		*/
	export type EasingFn = EasingFunction;
	export type EasingFunctionFactory = {
			factory: () => EasingFunction;
	};
	/**
		* @deprecated Please use {@link EasingFunctionFactory} type instead.
		*/
	export type EasingFactoryFn = EasingFunctionFactory;
	/**
		* A linear function, `f(t) = t`. Position correlates to elapsed time one to
		* one.
		*
		* http://cubic-bezier.com/#0,0,1,1
		*/
	function linear(t: number): number;
	/**
		* A simple inertial interaction, similar to an object slowly accelerating to
		* speed.
		*
		* http://cubic-bezier.com/#.42,0,1,1
		*/
	function ease(t: number): number;
	/**
		* A quadratic function, `f(t) = t * t`. Position equals the square of elapsed
		* time.
		*
		* http://easings.net/#easeInQuad
		*/
	function quad(t: number): number;
	/**
		* A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed
		* time.
		*
		* http://easings.net/#easeInCubic
		*/
	function cubic(t: number): number;
	/**
		* A power function. Position is equal to the Nth power of elapsed time.
		*
		* n = 4: http://easings.net/#easeInQuart
		* n = 5: http://easings.net/#easeInQuint
		*/
	function poly(n: number): EasingFunction;
	/**
		* A sinusoidal function.
		*
		* http://easings.net/#easeInSine
		*/
	function sin(t: number): number;
	/**
		* A circular function.
		*
		* http://easings.net/#easeInCirc
		*/
	function circle(t: number): number;
	/**
		* An exponential function.
		*
		* http://easings.net/#easeInExpo
		*/
	function exp(t: number): number;
	/**
		* A simple elastic interaction, similar to a spring oscillating back and
		* forth.
		*
		* Default bounciness is 1, which overshoots a little bit once. 0 bounciness
		* doesn't overshoot at all, and bounciness of N \> 1 will overshoot about N
		* times.
		*
		* http://easings.net/#easeInElastic
		*/
	function elastic(bounciness?: number): EasingFunction;
	/**
		* Use with `Animated.parallel()` to create a simple effect where the object
		* animates back slightly as the animation starts.
		*
		* Wolfram Plot:
		*
		* - http://tiny.cc/back_default (s = 1.70158, default)
		*/
	function back(s?: number): (t: number) => number;
	/**
		* Provides a simple bouncing effect.
		*
		* http://easings.net/#easeInBounce
		*/
	function bounce(t: number): number;
	/**
		* Provides a cubic bezier curve, equivalent to CSS Transitions'
		* `transition-timing-function`.
		*
		* A useful tool to visualize cubic bezier curves can be found at
		* http://cubic-bezier.com/
		*/
	function bezier(x1: number, y1: number, x2: number, y2: number): {
			factory: () => (x: number) => number;
	};
	function bezierFn(x1: number, y1: number, x2: number, y2: number): (x: number) => number;
	/**
		* Runs an easing function forwards.
		*/
	function in_(easing: EasingFunction): EasingFunction;
	/**
		* Runs an easing function backwards.
		*/
	function out(easing: EasingFunction): EasingFunction;
	/**
		* Makes any easing function symmetrical. The easing function will run
		* forwards for half of the duration, then backwards for the rest of the
		* duration.
		*/
	function inOut(easing: EasingFunction): EasingFunction;
	/**
		* The `steps` easing function jumps between discrete values at regular intervals,
		* creating a stepped animation effect. The `n` parameter determines the number of
		* steps in the animation, and the `roundToNextStep` parameter determines whether the animation
		* should start at the beginning or end of each step.
		*/
	function steps(n?: number, roundToNextStep?: boolean): EasingFunction;
	export const Easing: {
			linear: typeof linear;
			ease: typeof ease;
			quad: typeof quad;
			cubic: typeof cubic;
			poly: typeof poly;
			sin: typeof sin;
			circle: typeof circle;
			exp: typeof exp;
			elastic: typeof elastic;
			back: typeof back;
			bounce: typeof bounce;
			bezier: typeof bezier;
			bezierFn: typeof bezierFn;
			steps: typeof steps;
			in: typeof in_;
			out: typeof out;
			inOut: typeof inOut;
	};
	export {};
}

declare module 'react-native-reanimated/reanimated2/component/ScrollView' {
	import React from 'react';
	import type { ScrollViewProps } from 'react-native';
	import { ScrollView } from 'react-native';
	import type { SharedValue } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { AnimatedProps } from 'react-native-reanimated/reanimated2/helperTypes';
	export interface AnimatedScrollViewProps extends AnimatedProps<ScrollViewProps> {
		scrollViewOffset?: SharedValue<number>;
	}
	interface AnimatedScrollViewComplement extends ScrollView {
		getNode(): ScrollView;
	}
	const AnimatedScrollViewComponent: React.ComponentClass<import("../helperTypes").AnimateProps<ScrollViewProps>, any>;
	export const AnimatedScrollView: React.ForwardRefExoticComponent<AnimatedScrollViewProps & React.RefAttributes<AnimatedScrollView>>;
	export type AnimatedScrollView = AnimatedScrollViewComplement & typeof AnimatedScrollViewComponent;
	export {};
}

declare module 'react-native-reanimated/reanimated2/component/FlatList' {
	import React from 'react';
	import type { FlatListProps } from 'react-native';
	import { FlatList } from 'react-native';
	import type { ILayoutAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import type { AnimatedProps } from 'react-native-reanimated/reanimated2/helperTypes';
	const AnimatedFlatList: React.ComponentClass<import("../helperTypes").AnimateProps<FlatListProps<unknown>>, any>;
	interface ReanimatedFlatListPropsWithLayout<T> extends AnimatedProps<FlatListProps<T>> {
			/**
				* Lets you pass layout animation directly to the FlatList item.
				*/
			itemLayoutAnimation?: ILayoutAnimationBuilder;
			/**
				* Lets you skip entering and exiting animations of FlatList items when on FlatList mount or unmount.
				*/
			skipEnteringExitingAnimations?: boolean;
	}
	export type FlatListPropsWithLayout<T> = ReanimatedFlatListPropsWithLayout<T>;
	interface AnimatedFlatListComplement<T> extends FlatList<T> {
			getNode(): FlatList<T>;
	}
	export const ReanimatedFlatList: <ItemT = any>(props: ReanimatedFlatListPropsWithLayout<ItemT> & {
			ref?: React.ForwardedRef<FlatList<any>> | undefined;
	}) => React.ReactElement;
	export type ReanimatedFlatList<T> = typeof AnimatedFlatList & AnimatedFlatListComplement<T>;
	export {};
}

declare module 'react-native-reanimated/createAnimatedComponent' {
	export { createAnimatedComponent } from 'react-native-reanimated/createAnimatedComponent/createAnimatedComponent';
}

declare module 'react-native-reanimated/reanimated2/component/Text' {
	import { Text } from 'react-native';
	interface AnimatedTextComplement extends Text {
		getNode(): Text;
	}
	export const AnimatedText: import("react").ComponentClass<import("..").AnimateProps<import("react-native").TextProps>, any>;
	export type AnimatedText = typeof AnimatedText & AnimatedTextComplement;
	export {};
}

declare module 'react-native-reanimated/reanimated2/component/View' {
	import { View } from 'react-native';
	interface AnimatedViewComplement extends View {
		getNode(): View;
	}
	export const AnimatedView: import("react").ComponentClass<import("..").AnimateProps<import("react-native").ViewProps>, any>;
	export type AnimatedView = typeof AnimatedView & AnimatedViewComplement;
	export {};
}

declare module 'react-native-reanimated/reanimated2/component/Image' {
	import { Image } from 'react-native';
	interface AnimatedImageComplement extends Image {
		getNode(): Image;
	}
	export const AnimatedImage: import("react").ComponentClass<import("..").AnimateProps<import("react-native").ImageProps>, any>;
	export type AnimatedImage = typeof AnimatedImage & AnimatedImageComplement;
	export {};
}

declare module 'react-native-reanimated/ConfigHelper' {
	export function configureProps(): void;
	export function addWhitelistedNativeProps(props: Record<string, boolean>): void;
	export function addWhitelistedUIProps(props: Record<string, boolean>): void;
	export interface ViewConfig {
		uiViewClassName: string;
		validAttributes: Record<string, unknown>;
	}
	/**
	  * updates UI props whitelist for given view host instance
	  * this will work just once for every view name
	  */
	export function adaptViewConfig(viewConfig: ViewConfig): void;
}

declare module 'react-native-reanimated/reanimated2/core' {
	import type { AnimatedKeyboardOptions, SensorConfig, SensorType, SharedValue, Value3D, ValueRotation } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { LayoutAnimationBatchItem } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	export { startMapper, stopMapper } from 'react-native-reanimated/reanimated2/mappers';
	export { runOnJS, runOnUI, executeOnUIRuntimeSync } from 'react-native-reanimated/reanimated2/threads';
	export { createWorkletRuntime, runOnRuntime } from 'react-native-reanimated/reanimated2/runtimes';
	export type { WorkletRuntime } from 'react-native-reanimated/reanimated2/runtimes';
	export { makeShareable, makeShareableCloneRecursive } from 'react-native-reanimated/reanimated2/shareables';
	export { makeMutable } from 'react-native-reanimated/reanimated2/mutables';
	/**
		* @returns `true` in Reanimated 3, doesn't exist in Reanimated 2 or 1
		*/
	export const isReanimated3: () => boolean;
	/**
		* @deprecated This function was superseded by other checks.
		* We keep it here for backward compatibility reasons.
		* If you need to check if you are using Reanimated 3 or Reanimated 2
		* please use `isReanimated3` function instead.
		* @returns `true` in Reanimated 3, doesn't exist in Reanimated 2
		*/
	export const isConfigured: () => boolean;
	export function getViewProp<T>(viewTag: number, propName: string, component?: React.Component): Promise<T>;
	export function registerEventHandler<T>(eventHandler: (event: T) => void, eventName: string, emitterReactTag?: number): number;
	export function unregisterEventHandler(id: number): void;
	export function subscribeForKeyboardEvents(eventHandler: (state: number, height: number) => void, options: AnimatedKeyboardOptions): number;
	export function unsubscribeFromKeyboardEvents(listenerId: number): void;
	export function registerSensor(sensorType: SensorType, config: SensorConfig, eventHandler: (data: Value3D | ValueRotation, orientationDegrees: number) => void): number;
	export function initializeSensor(sensorType: SensorType, config: SensorConfig): SharedValue<Value3D | ValueRotation>;
	export function unregisterSensor(sensorId: number): void;
	export function enableLayoutAnimations(flag: boolean, isCallByUser?: boolean): void;
	export function configureLayoutAnimationBatch(layoutAnimationsBatch: LayoutAnimationBatchItem[]): void;
	export function setShouldAnimateExitingForTag(viewTag: number | HTMLElement, shouldAnimate: boolean): void;
	export function jsiConfigureProps(uiProps: string[], nativeProps: string[]): void;
}

declare module 'react-native-reanimated/reanimated2/hook' {
	export type { DependencyList, AnimatedRef, ReanimatedScrollEvent as ScrollEvent, ReanimatedEvent, } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	export { useAnimatedProps } from 'react-native-reanimated/reanimated2/hook/useAnimatedProps';
	export { useWorkletCallback } from 'react-native-reanimated/reanimated2/hook/useWorkletCallback';
	export { useSharedValue } from 'react-native-reanimated/reanimated2/hook/useSharedValue';
	export { useReducedMotion } from 'react-native-reanimated/reanimated2/hook/useReducedMotion';
	export { useAnimatedStyle } from 'react-native-reanimated/reanimated2/hook/useAnimatedStyle';
	export { useAnimatedGestureHandler } from 'react-native-reanimated/reanimated2/hook/useAnimatedGestureHandler';
	export type { GestureHandlerEvent, GestureHandlers, } from 'react-native-reanimated/reanimated2/hook/useAnimatedGestureHandler';
	export { useAnimatedReaction } from 'react-native-reanimated/reanimated2/hook/useAnimatedReaction';
	export { useAnimatedRef } from 'react-native-reanimated/reanimated2/hook/useAnimatedRef';
	export { useAnimatedScrollHandler } from 'react-native-reanimated/reanimated2/hook/useAnimatedScrollHandler';
	export type { ScrollHandler, ScrollHandlers, ScrollHandlerProcessed, ScrollHandlerInternal, } from 'react-native-reanimated/reanimated2/hook/useAnimatedScrollHandler';
	export { useDerivedValue } from 'react-native-reanimated/reanimated2/hook/useDerivedValue';
	export type { DerivedValue } from 'react-native-reanimated/reanimated2/hook/useDerivedValue';
	export { useAnimatedSensor } from 'react-native-reanimated/reanimated2/hook/useAnimatedSensor';
	export { useFrameCallback } from 'react-native-reanimated/reanimated2/hook/useFrameCallback';
	export type { FrameCallback } from 'react-native-reanimated/reanimated2/hook/useFrameCallback';
	export { useAnimatedKeyboard } from 'react-native-reanimated/reanimated2/hook/useAnimatedKeyboard';
	export { useScrollViewOffset } from 'react-native-reanimated/reanimated2/hook/useScrollViewOffset';
	export type { EventHandler, EventHandlerProcessed, EventHandlerInternal, } from 'react-native-reanimated/reanimated2/hook/useEvent';
	export { useEvent } from 'react-native-reanimated/reanimated2/hook/useEvent';
	export type { UseHandlerContext } from 'react-native-reanimated/reanimated2/hook/useHandler';
	export { useHandler } from 'react-native-reanimated/reanimated2/hook/useHandler';
}

declare module 'react-native-reanimated/reanimated2/animation' {
	export type { HigherOrderAnimation, NextAnimation, DelayAnimation, RepeatAnimation, SequenceAnimation, StyleLayoutAnimation, } from 'react-native-reanimated/reanimated2/animation/commonTypes';
	export { cancelAnimation, defineAnimation, initialUpdaterRun } from 'react-native-reanimated/reanimated2/animation/util';
	export { withTiming } from 'react-native-reanimated/reanimated2/animation/timing';
	export type { TimingAnimation, WithTimingConfig } from 'react-native-reanimated/reanimated2/animation/timing';
	export { withSpring } from 'react-native-reanimated/reanimated2/animation/spring';
	export type { SpringAnimation, WithSpringConfig } from 'react-native-reanimated/reanimated2/animation/springUtils';
	export { withDecay } from 'react-native-reanimated/reanimated2/animation/decay';
	export type { DecayAnimation, WithDecayConfig } from 'react-native-reanimated/reanimated2/animation/decay';
	export { withClamp } from 'react-native-reanimated/reanimated2/animation/clamp';
	export { withDelay } from 'react-native-reanimated/reanimated2/animation/delay';
	export { withRepeat } from 'react-native-reanimated/reanimated2/animation/repeat';
	export { withSequence } from 'react-native-reanimated/reanimated2/animation/sequence';
	export { withStyleAnimation } from 'react-native-reanimated/reanimated2/animation/styleAnimation';
}

declare module 'react-native-reanimated/reanimated2/interpolation' {
	/**
		* Extrapolation type.
		*
		* @param IDENTITY - Returns the provided value as is.
		* @param CLAMP - Clamps the value to the edge of the output range.
		* @param EXTEND - Predicts the values beyond the output range.
		*/
	export enum Extrapolation {
			IDENTITY = "identity",
			CLAMP = "clamp",
			EXTEND = "extend"
	}
	/**
		* Represents the possible values for extrapolation as a string.
		*/
	type ExtrapolationAsString = 'identity' | 'clamp' | 'extend';
	/**
		* Allows to specify extrapolation for left and right edge of the interpolation.
		*/
	export interface ExtrapolationConfig {
			extrapolateLeft?: Extrapolation | string;
			extrapolateRight?: Extrapolation | string;
	}
	/**
		* Configuration options for extrapolation.
		*/
	export type ExtrapolationType = ExtrapolationConfig | Extrapolation | ExtrapolationAsString | undefined;
	/**
		* Lets you map a value from one range to another using linear interpolation.
		*
		* @param value - A number from the `input` range that is going to be mapped to the `output` range.
		* @param inputRange - An array of numbers specifying the input range of the interpolation.
		* @param outputRange - An array of numbers specifying the output range of the interpolation.
		* @param extrapolate - determines what happens when the `value` goes beyond the `input` range. Defaults to `Extrapolation.EXTEND` - {@link ExtrapolationType}.
		* @returns A mapped value within the output range.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/interpolate
		*/
	export function interpolate(x: number, inputRange: readonly number[], outputRange: readonly number[], type?: ExtrapolationType): number;
	/**
		* Lets you limit a value within a specified range.
		*
		* @param value - A number that will be returned as long as the provided value is in range between `min` and `max`.
		* @param min - A number which will be returned when provided `value` is lower than `min`.
		* @param max - A number which will be returned when provided `value` is higher than `max`.
		* @returns A number between min and max bounds.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/clamp/
		*/
	export function clamp(value: number, min: number, max: number): number;
	export {};
}

declare module 'react-native-reanimated/reanimated2/platformFunctions' {
	export { dispatchCommand } from 'react-native-reanimated/reanimated2/platformFunctions/dispatchCommand';
	export { measure } from 'react-native-reanimated/reanimated2/platformFunctions/measure';
	export { scrollTo } from 'react-native-reanimated/reanimated2/platformFunctions/scrollTo';
	export { setGestureState } from 'react-native-reanimated/reanimated2/platformFunctions/setGestureState';
	export { setNativeProps } from 'react-native-reanimated/reanimated2/platformFunctions/setNativeProps';
	export { getRelativeCoords } from 'react-native-reanimated/reanimated2/platformFunctions/getRelativeCoords';
	export type { ComponentCoords } from 'react-native-reanimated/reanimated2/platformFunctions/getRelativeCoords';
}

declare module 'react-native-reanimated/reanimated2/Colors' {
	/**
		* Copied from:
		* react-native/Libraries/StyleSheet/normalizeColor.js
		* react-native/Libraries/StyleSheet/processColor.js
		* https://github.com/wcandillon/react-native-redash/blob/master/src/Colors.ts
		*/
	import type { StyleProps } from 'react-native-reanimated/reanimated2/commonTypes';
	interface HSV {
			h: number;
			s: number;
			v: number;
	}
	export const ColorProperties: string[];
	export const opacity: (c: number) => number;
	export const red: (c: number) => number;
	export const green: (c: number) => number;
	export const blue: (c: number) => number;
	export const rgbaColor: (r: number, g: number, b: number, alpha?: number) => number | string;
	/**
		*
		* @param r - red value (0-255)
		* @param g - green value (0-255)
		* @param b - blue value (0-255)
		* @returns \{h: hue (0-1), s: saturation (0-1), v: value (0-1)\}
		*/
	export function RGBtoHSV(r: number, g: number, b: number): HSV;
	export const hsvToColor: (h: number, s: number, v: number, a: number) => number | string;
	export function isColor(value: unknown): boolean;
	export function processColor(color: unknown): number | null | undefined;
	export function processColorsInProps(props: StyleProps): void;
	export type ParsedColorArray = [number, number, number, number];
	export function convertToRGBA(color: unknown): ParsedColorArray;
	export function rgbaArrayToRGBAColor(RGBA: ParsedColorArray): string;
	export function toLinearSpace(RGBA: ParsedColorArray, gamma?: number): ParsedColorArray;
	export function toGammaSpace(RGBA: ParsedColorArray, gamma?: number): ParsedColorArray;
	export {};
}

declare module 'react-native-reanimated/reanimated2/PropAdapters' {
	import type { AnimatedPropsAdapterFunction } from 'react-native-reanimated/reanimated2/commonTypes';
	export function createAnimatedPropAdapter(adapter: AnimatedPropsAdapterFunction, nativeProps?: string[]): AnimatedPropsAdapterFunction;
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation' {
	import './animationsManager';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/sharedTransitions';
	export type { KeyframeProps } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
}

declare module 'react-native-reanimated/reanimated2/isSharedValue' {
	import type { SharedValue } from 'react-native-reanimated/reanimated2/commonTypes';
	export function isSharedValue<T = unknown>(value: unknown): value is SharedValue<T>;
}

declare module 'react-native-reanimated/reanimated2/frameCallback' {
	export type { FrameInfo } from 'react-native-reanimated/reanimated2/frameCallback/FrameCallbackRegistryUI';
}

declare module 'react-native-reanimated/reanimated2/pluginUtils' {
	export function getUseOfValueInStyleWarning(): string;
}

declare module 'react-native-reanimated/reanimated2/jestUtils' {
	import type { ReactTestInstance } from 'react-test-renderer';
	import type { DefaultStyle } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	global {
		namespace jest {
			interface Matchers<R> {
				toHaveAnimatedStyle(style: Record<string, unknown>[] | Record<string, unknown>, config?: {
					shouldMatchAllProps?: boolean;
				}): R;
			}
		}
	}
	export const withReanimatedTimer: (animationTest: () => void) => void;
	export const advanceAnimationByTime: (time?: number) => void;
	export const advanceAnimationByFrame: (count: number) => void;
	export const setUpTests: (userFramerateConfig?: {}) => void;
	export const getAnimatedStyle: (component: ReactTestInstance) => DefaultStyle;
}

declare module 'react-native-reanimated/reanimated2/component/LayoutAnimationConfig' {
	import React, { Component } from 'react';
	import type { ReactNode } from 'react';
	export const SkipEnteringContext: React.Context<React.MutableRefObject<boolean> | null>;
	interface LayoutAnimationConfigProps {
		skipEntering?: boolean;
		skipExiting?: boolean;
		children: ReactNode;
	}
	/**
	  * A component that lets you skip entering and exiting animations.
	  *
	  * @param skipEntering - A boolean indicating whether children's entering animations should be skipped when `LayoutAnimationConfig` is mounted.
	  * @param skipExiting - A boolean indicating whether children's exiting animations should be skipped when LayoutAnimationConfig is unmounted.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/layout-animation-config/
	  */
	export class LayoutAnimationConfig extends Component<LayoutAnimationConfigProps> {
		getMaybeWrappedChildren(): string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | Iterable<React.ReactNode> | React.JSX.Element[] | null | undefined;
		setShouldAnimateExiting(): void;
		componentWillUnmount(): void;
		render(): ReactNode;
	}
	export {};
}

declare module 'react-native-reanimated/reanimated2/component/PerformanceMonitor' {
	import React from 'react';
	export function PerformanceMonitor(): React.JSX.Element;
}

declare module 'react-native-reanimated/reanimated2/mappers' {
	import type { MapperRawInputs, MapperOutputs } from 'react-native-reanimated/reanimated2/commonTypes';
	export function startMapper(worklet: () => void, inputs?: MapperRawInputs, outputs?: MapperOutputs): number;
	export function stopMapper(mapperID: number): void;
}

declare module 'react-native-reanimated/reanimated2/screenTransition' {
	export { startScreenTransition, finishScreenTransition, } from 'react-native-reanimated/reanimated2/screenTransition/animationManager';
	export { ScreenTransition } from 'react-native-reanimated/reanimated2/screenTransition/presets';
	export type { AnimatedScreenTransition, GoBackGesture, ScreenTransitionConfig, } from 'react-native-reanimated/reanimated2/screenTransition/commonTypes';
}

declare module 'react-native-reanimated/reanimated2/hook/commonTypes' {
	import type { Component, MutableRefObject } from 'react';
	import type { AnimatedPropsAdapterFunction, ShadowNodeWrapper, SharedValue, WorkletFunction } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { ImageStyle, NativeSyntheticEvent, TextStyle, ViewStyle, NativeScrollEvent } from 'react-native';
	import type { ViewDescriptorsSet, ViewRefSet } from 'react-native-reanimated/reanimated2/ViewDescriptorsSet';
	import type { AnimatedStyle } from 'react-native-reanimated/reanimated2/helperTypes';
	export type DependencyList = Array<unknown> | undefined;
	export interface Descriptor {
			tag: number;
			name: string;
			shadowNodeWrapper: ShadowNodeWrapper;
	}
	export interface AnimatedRef<T extends Component> {
			(component?: T): number | ShadowNodeWrapper | HTMLElement;
			current: T | null;
			getTag: () => number;
	}
	export type AnimatedRefOnJS = AnimatedRef<Component>;
	/**
		* `AnimatedRef` is mapped to this type on the UI thread via a shareable handle.
		*/
	export type AnimatedRefOnUI = {
			(): number | ShadowNodeWrapper | null;
			/**
				* @remarks `viewName` is required only on iOS with Paper and it's value is null on other platforms.
				*/
			viewName: SharedValue<string | null>;
	};
	type ReanimatedPayload = {
			eventName: string;
	};
	/**
		* This utility type is to convert type of events that would normally be
		* sent by React Native (they have `nativeEvent` field) to the type
		* that is sent by Reanimated.
		*/
	export type ReanimatedEvent<Event extends object> = ReanimatedPayload & (Event extends {
			nativeEvent: infer NativeEvent extends object;
	} ? NativeEvent : Event);
	export type EventPayload<Event extends object> = Event extends {
			nativeEvent: infer NativeEvent extends object;
	} ? NativeEvent : Omit<Event, 'eventName'>;
	export type NativeEventWrapper<Event extends object> = {
			nativeEvent: Event;
	};
	export type DefaultStyle = ViewStyle | ImageStyle | TextStyle;
	export type RNNativeScrollEvent = NativeSyntheticEvent<NativeScrollEvent>;
	export type ReanimatedScrollEvent = ReanimatedEvent<RNNativeScrollEvent>;
	export interface IWorkletEventHandler<Event extends object> {
			updateEventHandler: (newWorklet: (event: ReanimatedEvent<Event>) => void, newEvents: string[]) => void;
			registerForEvents: (viewTag: number, fallbackEventName?: string) => void;
			unregisterFromEvents: (viewTag: number) => void;
	}
	export interface AnimatedStyleHandle<Style extends DefaultStyle = DefaultStyle> {
			viewDescriptors: ViewDescriptorsSet;
			initial: {
					value: AnimatedStyle<Style>;
					updater: () => AnimatedStyle<Style>;
			};
			/**
				* @remarks `viewsRef` is only defined in Web implementation.
				*/
			viewsRef: ViewRefSet<unknown> | undefined;
	}
	export interface JestAnimatedStyleHandle<Style extends DefaultStyle = DefaultStyle> extends AnimatedStyleHandle<Style> {
			jestAnimatedStyle: MutableRefObject<AnimatedStyle<Style>>;
	}
	export type UseAnimatedStyleInternal<Style extends DefaultStyle> = (updater: WorkletFunction<[], Style> | (() => Style), dependencies?: DependencyList | null, adapters?: AnimatedPropsAdapterFunction | AnimatedPropsAdapterFunction[] | null, isAnimatedProps?: boolean) => AnimatedStyleHandle<Style> | JestAnimatedStyleHandle<Style>;
	export {};
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/BaseAnimationBuilder' {
	import type { EntryExitAnimationFunction, AnimationFunction, LayoutAnimationFunction } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import { ReduceMotion } from 'react-native-reanimated/reanimated2/commonTypes';
	export class BaseAnimationBuilder {
			durationV?: number;
			delayV?: number;
			reduceMotionV: ReduceMotion;
			randomizeDelay: boolean;
			callbackV?: (finished: boolean) => void;
			static createInstance: <T extends typeof BaseAnimationBuilder>(this: T) => InstanceType<T>;
			build: () => EntryExitAnimationFunction | LayoutAnimationFunction;
			/**
				* Lets you adjust the animation duration. Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param durationMs - Length of the animation (in milliseconds).
				*/
			static duration<T extends typeof BaseAnimationBuilder>(this: T, durationMs: number): InstanceType<T>;
			duration(durationMs: number): this;
			/**
				* Lets you adjust the delay before the animation starts (in milliseconds). Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param delayMs - Delay before the animation starts (in milliseconds).
				*/
			static delay<T extends typeof BaseAnimationBuilder>(this: T, delayMs: number): InstanceType<T>;
			delay(delayMs: number): this;
			/**
				* The callback that will fire after the animation ends. Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param callback - Callback that will fire after the animation ends.
				*/
			static withCallback<T extends typeof BaseAnimationBuilder>(this: T, callback: (finished: boolean) => void): InstanceType<T>;
			withCallback(callback: (finished: boolean) => void): this;
			/**
				* Lets you adjust the behavior when the device's reduced motion accessibility setting is turned on.  Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param reduceMotion - Determines how the animation responds to the device's reduced motion accessibility setting. Default to `ReduceMotion.System` - {@link ReduceMotion}.
				*/
			static reduceMotion<T extends typeof BaseAnimationBuilder>(this: T, reduceMotion: ReduceMotion): InstanceType<T>;
			reduceMotion(reduceMotionV: ReduceMotion): this;
			static getDuration(): number;
			getDuration(): number;
			/**
				* @deprecated Use `.delay()` with `Math.random()` instead
				*/
			static randomDelay<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			randomDelay(): this;
			getDelay(): number;
			getReduceMotion(): ReduceMotion;
			getDelayFunction(): AnimationFunction;
			static build<T extends typeof BaseAnimationBuilder>(this: T): EntryExitAnimationFunction | LayoutAnimationFunction;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes' {
	import type { TransformArrayItem } from 'react-native-reanimated/reanimated2/helperTypes';
	import type { EasingFunction } from 'react-native-reanimated/reanimated2/Easing';
	import type { ShareableRef, StyleProps } from 'react-native-reanimated/reanimated2/commonTypes';
	export type LayoutAnimationsOptions = 'originX' | 'originY' | 'width' | 'height' | 'borderRadius' | 'globalOriginX' | 'globalOriginY';
	type CurrentLayoutAnimationsValues = {
		[K in LayoutAnimationsOptions as `current${Capitalize<string & K>}`]: number;
	};
	type TargetLayoutAnimationsValues = {
		[K in LayoutAnimationsOptions as `target${Capitalize<string & K>}`]: number;
	};
	interface WindowDimensions {
		windowWidth: number;
		windowHeight: number;
	}
	export interface KeyframeProps extends StyleProps {
		easing?: EasingFunction;
	}
	export type LayoutAnimation = {
		initialValues: StyleProps;
		animations: StyleProps;
		callback?: (finished: boolean) => void;
	};
	export type AnimationFunction = (a?: any, b?: any, c?: any) => any;
	export type EntryAnimationsValues = TargetLayoutAnimationsValues & WindowDimensions;
	export type ExitAnimationsValues = CurrentLayoutAnimationsValues & WindowDimensions;
	export type EntryExitAnimationFunction = ((targetValues: EntryAnimationsValues) => LayoutAnimation) | ((targetValues: ExitAnimationsValues) => LayoutAnimation) | (() => LayoutAnimation);
	export type AnimationConfigFunction<T> = (targetValues: T) => LayoutAnimation;
	export type LayoutAnimationsValues = CurrentLayoutAnimationsValues & TargetLayoutAnimationsValues & WindowDimensions;
	export interface SharedTransitionAnimationsValues extends LayoutAnimationsValues {
		currentTransformMatrix: number[];
		targetTransformMatrix: number[];
	}
	export type SharedTransitionAnimationsFunction = (values: SharedTransitionAnimationsValues) => LayoutAnimation;
	export enum LayoutAnimationType {
		ENTERING = 1,
		EXITING = 2,
		LAYOUT = 3,
		SHARED_ELEMENT_TRANSITION = 4,
		SHARED_ELEMENT_TRANSITION_PROGRESS = 5
	}
	export type LayoutAnimationFunction = (targetValues: LayoutAnimationsValues) => LayoutAnimation;
	export type LayoutAnimationStartFunction = (tag: number, type: LayoutAnimationType, yogaValues: Partial<SharedTransitionAnimationsValues>, config: LayoutAnimationFunction) => void;
	export interface ILayoutAnimationBuilder {
		build: () => LayoutAnimationFunction;
	}
	export interface BaseLayoutAnimationConfig {
		duration?: number;
		easing?: EasingFunction;
		type?: AnimationFunction;
		damping?: number;
		dampingRatio?: number;
		mass?: number;
		stiffness?: number;
		overshootClamping?: number;
		restDisplacementThreshold?: number;
		restSpeedThreshold?: number;
	}
	export interface BaseBuilderAnimationConfig extends BaseLayoutAnimationConfig {
		rotate?: number | string;
	}
	export type LayoutAnimationAndConfig = [
		AnimationFunction,
		BaseBuilderAnimationConfig
	];
	export interface IEntryExitAnimationBuilder {
		build: () => EntryExitAnimationFunction;
	}
	export interface IEntryAnimationBuilder {
		build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	export interface IExitAnimationBuilder {
		build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
	export type ProgressAnimationCallback = (viewTag: number, progress: number) => void;
	export type ProgressAnimation = (viewTag: number, values: SharedTransitionAnimationsValues, progress: number) => void;
	export type CustomProgressAnimation = (values: SharedTransitionAnimationsValues, progress: number) => StyleProps;
	/**
	  * Used to configure the `.defaultTransitionType()` shared transition modifier.
	  * @experimental
	  */
	export enum SharedTransitionType {
		ANIMATION = "animation",
		PROGRESS_ANIMATION = "progressAnimation"
	}
	export type EntryExitAnimationsValues = EntryAnimationsValues | ExitAnimationsValues;
	export type StylePropsWithArrayTransform = StyleProps & {
		transform?: TransformArrayItem[];
	};
	export interface LayoutAnimationBatchItem {
		viewTag: number;
		type: LayoutAnimationType;
		config: ShareableRef<Keyframe | LayoutAnimationFunction | SharedTransitionAnimationsFunction | ProgressAnimationCallback> | undefined;
		sharedTransitionTag?: string;
	}
	export {};
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/Keyframe' {
	import type { KeyframeProps } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import { ReduceMotion } from 'react-native-reanimated/reanimated2/commonTypes';
	export class ReanimatedKeyframe {
		constructor(definitions: Record<string, KeyframeProps>);
		duration(durationMs: number): ReanimatedKeyframe;
		delay(delayMs: number): ReanimatedKeyframe;
		reduceMotion(reduceMotionV: ReduceMotion): ReanimatedKeyframe;
		withCallback(callback: (finished: boolean) => void): ReanimatedKeyframe;
	}
	export const Keyframe: typeof ReanimatedKeyframe;
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/sharedTransitions' {
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/sharedTransitions/SharedTransition';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/sharedTransitions/ProgressTransitionManager';
}

declare module 'react-native-reanimated/createAnimatedComponent/createAnimatedComponent' {
	import type { ComponentClass, ComponentType, FunctionComponent } from 'react';
	import '../reanimated2/layoutReanimation/animationsManager';
	import type { AnimateProps } from 'react-native-reanimated/reanimated2';
	import type { AnimatedComponentRef } from 'react-native-reanimated/createAnimatedComponent/commonTypes';
	import type { FlatList, FlatListProps } from 'react-native';
	type Options<P> = {
			setNativeProps: (ref: AnimatedComponentRef, props: P) => void;
	};
	/**
		* Lets you create an Animated version of any React Native component.
		*
		* @param component - The component you want to make animatable.
		* @returns A component that Reanimated is capable of animating.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/core/createAnimatedComponent
		*/
	export function createAnimatedComponent<P extends object>(component: FunctionComponent<P>, options?: Options<P>): FunctionComponent<AnimateProps<P>>;
	export function createAnimatedComponent<P extends object>(component: ComponentClass<P>, options?: Options<P>): ComponentClass<AnimateProps<P>>;
	export function createAnimatedComponent<P extends object>(component: ComponentType<P>, options?: Options<P>): FunctionComponent<AnimateProps<P>> | ComponentClass<AnimateProps<P>>;
	/**
		* @deprecated Please use `Animated.FlatList` component instead of calling `Animated.createAnimatedComponent(FlatList)` manually.
		*/
	export function createAnimatedComponent(component: typeof FlatList<unknown>, options?: Options<any>): ComponentClass<AnimateProps<FlatListProps<unknown>>>;
	export {};
}

declare module 'react-native-reanimated/reanimated2/threads' {
	import type { WorkletFunction } from 'react-native-reanimated/reanimated2/commonTypes';
	export function setupMicrotasks(): void;
	export const callMicrotasks: () => void;
	/**
		* Lets you asynchronously run [workletized](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#to-workletize) functions on the [UI thread](https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUI).
		*
		* This method does not schedule the work immediately but instead waits for other worklets
		* to be scheduled within the same JS loop. It uses queueMicrotask to schedule all the worklets
		* at once making sure they will run within the same frame boundaries on the UI thread.
		*
		* @param fun - A reference to a function you want to execute on the [UI thread](https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUI) from the [JavaScript thread](https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUI).
		* @returns A function that accepts arguments for the function passed as the first argument.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnUI
		*/
	export function runOnUI<Args extends unknown[], ReturnValue>(worklet: (...args: Args) => ReturnValue): (...args: Args) => void;
	export function executeOnUIRuntimeSync<Args extends unknown[], ReturnValue>(worklet: (...args: Args) => ReturnValue): (...args: Args) => ReturnValue;
	export function runOnUIImmediately<Args extends unknown[], ReturnValue>(worklet: (...args: Args) => ReturnValue): WorkletFunction<Args, ReturnValue>;
	type ReleaseRemoteFunction<Args extends unknown[], ReturnValue> = {
			(...args: Args): ReturnValue;
	};
	type DevRemoteFunction<Args extends unknown[], ReturnValue> = {
			__remoteFunction: (...args: Args) => ReturnValue;
	};
	type RemoteFunction<Args extends unknown[], ReturnValue> = ReleaseRemoteFunction<Args, ReturnValue> | DevRemoteFunction<Args, ReturnValue>;
	/**
		* Lets you asynchronously run non-[workletized](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#to-workletize) functions that couldn't otherwise run on the [UI thread](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#ui-thread).
		* This applies to most external libraries as they don't have their functions marked with "worklet"; directive.
		*
		* @param fun - A reference to a function you want to execute on the JavaScript thread from the UI thread.
		* @returns A function that accepts arguments for the function passed as the first argument.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/threading/runOnJS
		*/
	export function runOnJS<Args extends unknown[], ReturnValue>(fun: ((...args: Args) => ReturnValue) | RemoteFunction<Args, ReturnValue> | WorkletFunction<Args, ReturnValue>): (...args: Args) => void;
	export {};
}

declare module 'react-native-reanimated/reanimated2/runtimes' {
	import type { WorkletFunction } from 'react-native-reanimated/reanimated2/commonTypes';
	export type WorkletRuntime = {
		__hostObjectWorkletRuntime: never;
		readonly name: string;
	};
	/**
	  * Lets you create a new JS runtime which can be used to run worklets possibly on different threads than JS or UI thread.
	  *
	  * @param name - A name used to identify the runtime which will appear in devices list in Chrome DevTools.
	  * @param initializer - An optional worklet that will be run synchronously on the same thread immediately after the runtime is created.
	  * @returns WorkletRuntime which is a jsi::HostObject\<reanimated::WorkletRuntime\> - {@link WorkletRuntime}
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/threading/createWorkletRuntime
	  */
	export function createWorkletRuntime(name: string, initializer?: () => void): WorkletRuntime;
	export function runOnRuntime<Args extends unknown[], ReturnValue>(workletRuntime: WorkletRuntime, worklet: (...args: Args) => ReturnValue): WorkletFunction<Args, ReturnValue>;
}

declare module 'react-native-reanimated/reanimated2/shareables' {
	import type { ShareableRef, FlatShareableRef } from 'react-native-reanimated/reanimated2/commonTypes';
	export function makeShareableCloneRecursive<T>(value: any, shouldPersistRemote?: boolean, depth?: number): ShareableRef<T>;
	export function makeShareableCloneOnUIRecursive<T>(value: T): FlatShareableRef<T>;
	function makeShareableJS<T extends object>(value: T): T;
	/**
	  * This function creates a value on UI with persistent state - changes to it on the UI
	  * thread will be seen by all worklets. Use it when you want to create a value
	  * that is read and written only on the UI thread.
	  */
	export const makeShareable: typeof makeShareableJS;
	export {};
}

declare module 'react-native-reanimated/reanimated2/mutables' {
	import type { Mutable } from 'react-native-reanimated/reanimated2/commonTypes';
	export function makeUIMutable<Value>(initial: Value): Mutable<Value>;
	export function makeMutable<Value>(initial: Value): Mutable<Value>;
}

declare module 'react-native-reanimated/reanimated2/hook/useAnimatedProps' {
	import type { DependencyList } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	import type { AnimatedPropsAdapterFunction } from 'react-native-reanimated/reanimated2/commonTypes';
	type UseAnimatedProps = <Props extends object>(updater: () => Partial<Props>, dependencies?: DependencyList | null, adapters?: AnimatedPropsAdapterFunction | AnimatedPropsAdapterFunction[] | null, isAnimatedProps?: boolean) => Partial<Props>;
	/**
	  * Lets you create an animated props object which can be animated using shared values.
	  *
	  * @param updater - A function returning an object with properties you want to animate.
	  * @param dependencies - An optional array of dependencies. Only relevant when using Reanimated without the Babel plugin on the Web.
	  * @param adapters - An optional function or array of functions allowing to adopt prop naming between JS and the native side.
	  * @returns An animated props object which has to be passed to `animatedProps` property of an Animated component that you want to animate.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedProps
	  */
	export const useAnimatedProps: UseAnimatedProps;
	export {};
}

declare module 'react-native-reanimated/reanimated2/hook/useWorkletCallback' {
	import type { DependencyList } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	/**
	  * @deprecated don't use
	  */
	export function useWorkletCallback<Args extends unknown[], ReturnValue>(worklet: (...args: Args) => ReturnValue, deps?: DependencyList): (...args: Args) => ReturnValue;
}

declare module 'react-native-reanimated/reanimated2/hook/useSharedValue' {
	import type { SharedValue } from 'react-native-reanimated/reanimated2/commonTypes';
	/**
	  * Lets you define [shared values](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value) in your components.
	  *
	  * @param initialValue - The value you want to be initially stored to a `.value` property.
	  * @returns A shared value with a single `.value` property initially set to the `initialValue` - {@link SharedValue}.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useSharedValue
	  */
	export function useSharedValue<Value>(initialValue: Value): SharedValue<Value>;
}

declare module 'react-native-reanimated/reanimated2/hook/useReducedMotion' {
	/**
	  * Lets you query the reduced motion system setting.
	  *
	  * Changing the reduced motion system setting doesn't cause your components to rerender.
	  *
	  * @returns A boolean indicating whether the reduced motion setting was enabled when the app started.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/device/useReducedMotion
	  */
	export function useReducedMotion(): boolean;
}

declare module 'react-native-reanimated/reanimated2/hook/useAnimatedStyle' {
	import type { DefaultStyle, DependencyList } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	/**
	  * Lets you create a styles object, similar to StyleSheet styles, which can be animated using shared values.
	  *
	  * @param updater - A function returning an object with style properties you want to animate.
	  * @param dependencies - An optional array of dependencies. Only relevant when using Reanimated without the Babel plugin on the Web.
	  * @returns An animated style object which has to be passed to the `style` property of an Animated component you want to animate.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedStyle
	  */
	export function useAnimatedStyle<Style extends DefaultStyle>(updater: () => Style, dependencies?: DependencyList | null): Style;
}

declare module 'react-native-reanimated/reanimated2/hook/useAnimatedGestureHandler' {
	import type { DependencyList, NativeEventWrapper, ReanimatedEvent } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	const EVENT_TYPE: {
		readonly UNDETERMINED: 0;
		readonly FAILED: 1;
		readonly BEGAN: 2;
		readonly CANCELLED: 3;
		readonly ACTIVE: 4;
		readonly END: 5;
	};
	type StateType = (typeof EVENT_TYPE)[keyof typeof EVENT_TYPE];
	type DefaultEvent = {
		nativeEvent: {
			readonly handlerTag: number;
			readonly numberOfPointers: number;
			readonly state: (typeof EVENT_TYPE)[keyof typeof EVENT_TYPE];
			readonly x: number;
			readonly y: number;
			readonly absoluteX: number;
			readonly absoluteY: number;
			readonly translationX: number;
			readonly translationY: number;
			readonly velocityX: number;
			readonly velocityY: number;
		};
	};
	interface PropsUsedInUseAnimatedGestureHandler {
		handlerTag?: number;
		numberOfPointers?: number;
		state?: StateType;
		oldState?: StateType;
	}
	export type GestureHandlerEvent<Event extends object> = ReanimatedEvent<Event> | Event;
	type GestureHandler<Event extends NativeEventWrapper<PropsUsedInUseAnimatedGestureHandler>, Context extends Record<string, unknown>> = (eventPayload: ReanimatedEvent<Event>, context: Context, isCanceledOrFailed?: boolean) => void;
	export interface GestureHandlers<Event extends NativeEventWrapper<PropsUsedInUseAnimatedGestureHandler>, Context extends Record<string, unknown>> {
		[key: string]: GestureHandler<Event, Context> | undefined;
		onStart?: GestureHandler<Event, Context>;
		onActive?: GestureHandler<Event, Context>;
		onEnd?: GestureHandler<Event, Context>;
		onFail?: GestureHandler<Event, Context>;
		onCancel?: GestureHandler<Event, Context>;
		onFinish?: GestureHandler<Event, Context>;
	}
	/**
	  * @deprecated useAnimatedGestureHandler is an old API which is no longer supported.
	  *
	  * Please check https://docs.swmansion.com/react-native-gesture-handler/docs/guides/upgrading-to-2/
	  * for information about how to migrate to `react-native-gesture-handler` v2
	  */
	export function useAnimatedGestureHandler<Event extends NativeEventWrapper<PropsUsedInUseAnimatedGestureHandler> = DefaultEvent, Context extends Record<string, unknown> = Record<string, unknown>>(handlers: GestureHandlers<Event, Context>, dependencies?: DependencyList): (e: Event) => void;
	export {};
}

declare module 'react-native-reanimated/reanimated2/hook/useAnimatedReaction' {
	import type { DependencyList } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	/**
	  * Lets you to respond to changes in a [shared value](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value). It's especially useful when comparing values previously stored in the shared value with the current one.
	  *
	  * @param prepare - A function that should return a value to which you'd like to react.
	  * @param react - A function that reacts to changes in the value returned by the `prepare` function.
	  * @param dependencies - an optional array of dependencies. Only relevant when using Reanimated without the Babel plugin on the Web.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useAnimatedReaction
	  */
	export function useAnimatedReaction<PreparedResult>(prepare: () => PreparedResult, react: (prepared: PreparedResult, previous: PreparedResult | null) => void, dependencies?: DependencyList): void;
}

declare module 'react-native-reanimated/reanimated2/hook/useAnimatedRef' {
	import type { Component } from 'react';
	import type { AnimatedRef } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	/**
	  * Lets you get a reference of a view that you can use inside a worklet.
	  *
	  * @returns An object with a `.current` property which contains an instance of a component.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef
	  */
	export function useAnimatedRef<TComponent extends Component>(): AnimatedRef<TComponent>;
}

declare module 'react-native-reanimated/reanimated2/hook/useAnimatedScrollHandler' {
	import type { DependencyList, RNNativeScrollEvent, ReanimatedScrollEvent } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	import type { EventHandlerInternal, EventHandlerProcessed } from 'react-native-reanimated/reanimated2/hook/useEvent';
	export type ScrollHandler<Context extends Record<string, unknown> = Record<string, unknown>> = (event: ReanimatedScrollEvent, context: Context) => void;
	export interface ScrollHandlers<Context extends Record<string, unknown>> {
		onScroll?: ScrollHandler<Context>;
		onBeginDrag?: ScrollHandler<Context>;
		onEndDrag?: ScrollHandler<Context>;
		onMomentumBegin?: ScrollHandler<Context>;
		onMomentumEnd?: ScrollHandler<Context>;
	}
	export type ScrollHandlerProcessed<Context extends Record<string, unknown> = Record<string, unknown>> = EventHandlerProcessed<RNNativeScrollEvent, Context>;
	export type ScrollHandlerInternal = EventHandlerInternal<RNNativeScrollEvent>;
	/**
	  * Lets you run callbacks on ScrollView events. Supports `onScroll`, `onBeginDrag`, `onEndDrag`, `onMomentumBegin`, and `onMomentumEnd` events.
	  *
	  * These callbacks are automatically workletized and ran on the UI thread.
	  *
	  * @param handlers - An object containing event handlers.
	  * @param dependencies - An optional array of dependencies. Only relevant when using Reanimated without the Babel plugin on the Web.
	  * @returns An object you need to pass to `onScroll` prop on the `Animated.ScrollView` component.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/scroll/useAnimatedScrollHandler
	  */
	export function useAnimatedScrollHandler<Context extends Record<string, unknown>>(handlers: ScrollHandler<Context> | ScrollHandlers<Context>, dependencies?: DependencyList): ScrollHandlerProcessed<Context>;
}

declare module 'react-native-reanimated/reanimated2/hook/useAnimatedSensor' {
	import type { SensorConfig, AnimatedSensor, Value3D, ValueRotation } from 'react-native-reanimated/reanimated2/commonTypes';
	import { SensorType } from 'react-native-reanimated/reanimated2/commonTypes';
	/**
	  * Lets you create animations based on data from the device's sensors.
	  *
	  * @param sensorType - Type of the sensor to use. Configured with {@link SensorType} enum.
	  * @param config - The sensor configuration - {@link SensorConfig}.
	  * @returns An object containing the sensor measurements [shared value](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value) and a function to unregister the sensor
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/device/useAnimatedSensor
	  */
	export function useAnimatedSensor(sensorType: SensorType.ROTATION, userConfig?: Partial<SensorConfig>): AnimatedSensor<ValueRotation>;
	export function useAnimatedSensor(sensorType: Exclude<SensorType, SensorType.ROTATION>, userConfig?: Partial<SensorConfig>): AnimatedSensor<Value3D>;
}

declare module 'react-native-reanimated/reanimated2/hook/useFrameCallback' {
	import type { FrameInfo } from 'react-native-reanimated/reanimated2/frameCallback/FrameCallbackRegistryUI';
	/**
		* @param setActive - A function that lets you start the frame callback or stop it from running.
		* @param isActive - A boolean indicating whether a callback is running.
		* @param callbackId - A number indicating a unique identifier of the frame callback.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useFrameCallback#returns
		*/
	export type FrameCallback = {
			setActive: (isActive: boolean) => void;
			isActive: boolean;
			callbackId: number;
	};
	/**
		* Lets you run a function on every frame update.
		*
		* @param callback - A function executed on every frame update.
		* @param autostart - Whether the callback should start automatically. Defaults to `true`.
		* @returns A frame callback object - {@link FrameCallback}.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useFrameCallback
		*/
	export function useFrameCallback(callback: (frameInfo: FrameInfo) => void, autostart?: boolean): FrameCallback;
}

declare module 'react-native-reanimated/reanimated2/hook/useAnimatedKeyboard' {
	import type { AnimatedKeyboardInfo, AnimatedKeyboardOptions } from 'react-native-reanimated/reanimated2/commonTypes';
	/**
	  * Lets you synchronously get the position and state of the keyboard.
	  *
	  * @param options - An additional keyboard configuration options.
	  * @returns An object with the current keyboard `height` and `state` as [shared values](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#shared-value).
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/device/useAnimatedKeyboard
	  */
	export function useAnimatedKeyboard(options?: AnimatedKeyboardOptions): AnimatedKeyboardInfo;
}

declare module 'react-native-reanimated/reanimated2/hook/useScrollViewOffset' {
	import type { SharedValue } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { AnimatedScrollView } from 'react-native-reanimated/reanimated2/component/ScrollView';
	import type { AnimatedRef } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	/**
	  * Lets you synchronously get the current offset of a `ScrollView`.
	  *
	  * @param animatedRef - An [animated ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef) attached to an Animated.ScrollView component.
	  * @returns A shared value which holds the current offset of the `ScrollView`.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/scroll/useScrollViewOffset
	  */
	export const useScrollViewOffset: typeof useScrollViewOffsetWeb;
	function useScrollViewOffsetWeb(animatedRef: AnimatedRef<AnimatedScrollView>, providedOffset?: SharedValue<number>): SharedValue<number>;
	export {};
}

declare module 'react-native-reanimated/reanimated2/hook/useEvent' {
	import type { IWorkletEventHandler, ReanimatedEvent } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	/**
		* Worklet to provide as an argument to `useEvent` hook.
		*/
	export type EventHandler<Event extends object, Context extends Record<string, unknown> = never> = (event: ReanimatedEvent<Event>, context?: Context) => void;
	export type EventHandlerProcessed<Event extends object, Context extends Record<string, unknown> = never> = (event: Event, context?: Context) => void;
	export type EventHandlerInternal<Event extends object> = {
			workletEventHandler: IWorkletEventHandler<Event>;
	};
	/**
		* Lets you run a function whenever a specified native event occurs.
		*
		* @param handler - A function that receives an event object with event data - {@link EventHandler}.
		* @param eventNames - An array of event names the `handler` callback will react to.
		* @param rebuild - Whether the event handler should be rebuilt. Defaults to `false`.
		* @returns A function that will be called when the event occurs - {@link EventHandlerProcessed}.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useEvent
		*/
	export function useEvent<Event extends object, Context extends Record<string, unknown> = never>(handler: EventHandler<Event, Context>, eventNames?: string[], rebuild?: boolean): EventHandlerProcessed<Event, Context>;
}

declare module 'react-native-reanimated/reanimated2/hook/useHandler' {
	import type { DependencyList, ReanimatedEvent } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	interface GeneralHandler<Event extends object, Context extends Record<string, unknown>> {
		(event: ReanimatedEvent<Event>, context: Context): void;
	}
	type GeneralHandlers<Event extends object, Context extends Record<string, unknown>> = Record<string, GeneralHandler<Event, Context> | undefined>;
	export interface UseHandlerContext<Context extends Record<string, unknown>> {
		context: Context;
		doDependenciesDiffer: boolean;
		useWeb: boolean;
	}
	/**
	  * Lets you find out whether the event handler dependencies have changed.
	  *
	  * @param handlers - An object of event handlers.
	  * @param dependencies - An optional array of dependencies.
	  * @returns An object containing a boolean indicating whether the dependencies have changed, and a boolean indicating whether the code is running on the web.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useHandler
	  */
	export function useHandler<Event extends object, Context extends Record<string, unknown>>(handlers: GeneralHandlers<Event, Context>, dependencies?: DependencyList): UseHandlerContext<Context>;
	export {};
}

declare module 'react-native-reanimated/reanimated2/animation/commonTypes' {
	import type { StyleProps, AnimatableValue, AnimationObject, Animation, Timestamp, AnimationCallback } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { AnimatedStyle } from 'react-native-reanimated/reanimated2/helperTypes';
	export interface HigherOrderAnimation {
		isHigherOrder?: boolean;
	}
	export type NextAnimation<T extends AnimationObject> = T | (() => T);
	export interface ClampAnimation extends Animation<ClampAnimation>, HigherOrderAnimation {
		current: AnimatableValue;
	}
	export interface DelayAnimation extends Animation<DelayAnimation>, HigherOrderAnimation {
		startTime: Timestamp;
		started: boolean;
		previousAnimation: DelayAnimation | null;
		current: AnimatableValue;
	}
	export interface RepeatAnimation extends Animation<RepeatAnimation>, HigherOrderAnimation {
		reps: number;
		startValue: AnimatableValue;
		toValue?: AnimatableValue;
		previousAnimation?: RepeatAnimation;
	}
	export interface SequenceAnimation extends Animation<SequenceAnimation>, HigherOrderAnimation {
		animationIndex: number;
	}
	export interface StyleLayoutAnimation extends HigherOrderAnimation {
		current: StyleProps;
		styleAnimations: AnimatedStyle<any>;
		onFrame: (animation: StyleLayoutAnimation, timestamp: Timestamp) => boolean;
		onStart: (nextAnimation: StyleLayoutAnimation, current: AnimatedStyle<any>, timestamp: Timestamp, previousAnimation: StyleLayoutAnimation) => void;
		callback?: AnimationCallback;
	}
}

declare module 'react-native-reanimated/reanimated2/animation/util' {
	import type { StyleLayoutAnimation } from 'react-native-reanimated/reanimated2/animation/commonTypes';
	import { ReduceMotion } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { SharedValue, AnimatableValue, AnimationObject } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { EasingFunction, EasingFunctionFactory } from 'react-native-reanimated/reanimated2/Easing';
	export function assertEasingIsWorklet(easing: EasingFunction | EasingFunctionFactory): void;
	export function initialUpdaterRun<T>(updater: () => T): T;
	interface RecognizedPrefixSuffix {
			prefix?: string;
			suffix?: string;
			strippedValue: number;
	}
	export function recognizePrefixSuffix(value: string | number): RecognizedPrefixSuffix;
	/**
		* Returns whether the motion should be reduced for a specified config.
		* By default returns the system setting.
		*/
	export function getReduceMotionFromConfig(config?: ReduceMotion): boolean;
	/**
		* Returns the value that should be assigned to `animation.reduceMotion`
		* for a given config. If the config is not defined, `undefined` is returned.
		*/
	export function getReduceMotionForAnimation(config?: ReduceMotion): boolean | undefined;
	type AnimationToDecoration<T extends AnimationObject | StyleLayoutAnimation, U extends AnimationObject | StyleLayoutAnimation> = T extends StyleLayoutAnimation ? Record<string, unknown> : U | (() => U) | AnimatableValue;
	export function defineAnimation<T extends AnimationObject | StyleLayoutAnimation, // type that's supposed to be returned
	U extends AnimationObject | StyleLayoutAnimation = T>(starting: AnimationToDecoration<T, U>, factory: () => T): T;
	/**
		* Lets you cancel a running animation paired to a shared value.
		*
		* @param sharedValue - The shared value of a running animation that you want to cancel.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/core/cancelAnimation
		*/
	export function cancelAnimation<T>(sharedValue: SharedValue<T>): void;
	export {};
}

declare module 'react-native-reanimated/reanimated2/animation/timing' {
	import type { EasingFunction, EasingFunctionFactory } from 'react-native-reanimated/reanimated2/Easing';
	import type { Animation, AnimationCallback, Timestamp, AnimatableValue, ReduceMotion } from 'react-native-reanimated/reanimated2/commonTypes';
	/**
		* The timing animation configuration.
		*
		* @param duration - Length of the animation (in milliseconds). Defaults to 300.
		* @param easing - An easing function which defines the animation curve. Defaults to `Easing.inOut(Easing.quad)`.
		* @param reduceMotion - Determines how the animation responds to the device's reduced motion accessibility setting. Default to `ReduceMotion.System` - {@link ReduceMotion}.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/animations/withTiming#config-
		*/
	interface TimingConfig {
			duration?: number;
			reduceMotion?: ReduceMotion;
			easing?: EasingFunction | EasingFunctionFactory;
	}
	export type WithTimingConfig = TimingConfig;
	export interface TimingAnimation extends Animation<TimingAnimation> {
			type: string;
			easing: EasingFunction;
			startValue: AnimatableValue;
			startTime: Timestamp;
			progress: number;
			toValue: AnimatableValue;
			current: AnimatableValue;
	}
	type withTimingType = <T extends AnimatableValue>(toValue: T, userConfig?: TimingConfig, callback?: AnimationCallback) => T;
	/**
		* Lets you create an animation based on duration and easing.
		*
		* @param toValue - The value on which the animation will come at rest - {@link AnimatableValue}.
		* @param config - The timing animation configuration - {@link TimingConfig}.
		* @param callback - A function called on animation complete - {@link AnimationCallback}.
		* @returns An [animation object](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animation-object) which holds the current state of the animation.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/animations/withTiming
		*/
	export const withTiming: withTimingType;
	export {};
}

declare module 'react-native-reanimated/reanimated2/animation/spring' {
	import type { AnimationCallback, AnimatableValue } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { SpringConfig } from 'react-native-reanimated/reanimated2/animation/springUtils';
	type withSpringType = <T extends AnimatableValue>(toValue: T, userConfig?: SpringConfig, callback?: AnimationCallback) => T;
	/**
	  * Lets you create spring-based animations.
	  *
	  * @param toValue - the value at which the animation will come to rest - {@link AnimatableValue}
	  * @param config - the spring animation configuration - {@link SpringConfig}
	  * @param callback - a function called on animation complete - {@link AnimationCallback}
	  * @returns an [animation object](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animation-object) which holds the current state of the animation
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/animations/withSpring
	  */
	export const withSpring: withSpringType;
	export {};
}

declare module 'react-native-reanimated/reanimated2/animation/springUtils' {
	import type { Animation, AnimatableValue, Timestamp, ReduceMotion } from 'react-native-reanimated/reanimated2/commonTypes';
	/**
		* Spring animation configuration.
		*
		* @param mass - The weight of the spring. Reducing this value makes the animation faster. Defaults to 1.
		* @param damping - How quickly a spring slows down. Higher damping means the spring will come to rest faster. Defaults to 10.
		* @param duration - Length of the animation (in milliseconds). Defaults to 2000.
		* @param dampingRatio - How damped the spring is. Value 1 means the spring is critically damped, and value \>1 means the spring is overdamped. Defaults to 0.5.
		* @param stiffness - How bouncy the spring is. Defaults to 100.
		* @param velocity - Initial velocity applied to the spring equation. Defaults to 0.
		* @param overshootClamping - Whether a spring can bounce over the `toValue`. Defaults to false.
		* @param restDisplacementThreshold - The displacement below which the spring will snap to toValue without further oscillations. Defaults to 0.01.
		* @param restSpeedThreshold - The speed in pixels per second from which the spring will snap to toValue without further oscillations. Defaults to 2.
		* @param reduceMotion - Determines how the animation responds to the device's reduced motion accessibility setting. Default to `ReduceMotion.System` - {@link ReduceMotion}.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/animations/withSpring/#config-
		*/
	export type SpringConfig = {
			stiffness?: number;
			overshootClamping?: boolean;
			restDisplacementThreshold?: number;
			restSpeedThreshold?: number;
			velocity?: number;
			reduceMotion?: ReduceMotion;
	} & ({
			mass?: number;
			damping?: number;
			duration?: never;
			dampingRatio?: never;
			clamp?: never;
	} | {
			mass?: never;
			damping?: never;
			duration?: number;
			dampingRatio?: number;
			clamp?: {
					min?: number;
					max?: number;
			};
	});
	export type DefaultSpringConfig = {
			[K in keyof Required<SpringConfig>]: K extends 'reduceMotion' | 'clamp' ? Required<SpringConfig>[K] | undefined : Required<SpringConfig>[K];
	};
	export type WithSpringConfig = SpringConfig;
	export interface SpringConfigInner {
			useDuration: boolean;
			skipAnimation: boolean;
	}
	export interface SpringAnimation extends Animation<SpringAnimation> {
			current: AnimatableValue;
			toValue: AnimatableValue;
			velocity: number;
			lastTimestamp: Timestamp;
			startTimestamp: Timestamp;
			startValue: number;
			zeta: number;
			omega0: number;
			omega1: number;
	}
	export interface InnerSpringAnimation extends Omit<SpringAnimation, 'toValue' | 'current'> {
			toValue: number;
			current: number;
	}
	export function checkIfConfigIsValid(config: DefaultSpringConfig): boolean;
	export function bisectRoot({ min, max, func, maxIterations, }: {
			min: number;
			max: number;
			func: (x: number) => number;
			maxIterations?: number;
	}): number;
	export function initialCalculations(mass: number | undefined, config: DefaultSpringConfig & SpringConfigInner): {
			zeta: number;
			omega0: number;
			omega1: number;
	};
	/** We make an assumption that we can manipulate zeta without changing duration of movement.
		*  According to theory this change is small and tests shows that we can indeed ignore it.
		*/
	export function scaleZetaToMatchClamps(animation: SpringAnimation, clamp: {
			min?: number;
			max?: number;
	}): number;
	/** Runs before initial */
	export function calculateNewMassToMatchDuration(x0: number, config: DefaultSpringConfig & SpringConfigInner, v0: number): number;
	export function criticallyDampedSpringCalculations(animation: InnerSpringAnimation, precalculatedValues: {
			v0: number;
			x0: number;
			omega0: number;
			t: number;
	}): {
			position: number;
			velocity: number;
	};
	export function underDampedSpringCalculations(animation: InnerSpringAnimation, precalculatedValues: {
			zeta: number;
			v0: number;
			x0: number;
			omega0: number;
			omega1: number;
			t: number;
	}): {
			position: number;
			velocity: number;
	};
	export function isAnimationTerminatingCalculation(animation: InnerSpringAnimation, config: DefaultSpringConfig): {
			isOvershooting: boolean;
			isVelocity: boolean;
			isDisplacement: boolean;
	};
}

declare module 'react-native-reanimated/reanimated2/animation/decay' {
	export type { WithDecayConfig } from 'react-native-reanimated/reanimated2/animation/decay/decay';
	export { withDecay } from 'react-native-reanimated/reanimated2/animation/decay/decay';
	export type { DecayAnimation } from 'react-native-reanimated/reanimated2/animation/decay/utils';
}

declare module 'react-native-reanimated/reanimated2/animation/clamp' {
	type withClampType = <T extends number | string>(config: {
		min?: T;
		max?: T;
	}, clampedAnimation: T) => T;
	export const withClamp: withClampType;
	export {};
}

declare module 'react-native-reanimated/reanimated2/animation/delay' {
	import type { AnimatableValue, ReduceMotion } from 'react-native-reanimated/reanimated2/commonTypes';
	type withDelayType = <T extends AnimatableValue>(delayMs: number, delayedAnimation: T, reduceMotion?: ReduceMotion) => T;
	/**
	  * An animation modifier that lets you start an animation with a delay.
	  *
	  * @param delayMs - Duration (in milliseconds) before the animation starts.
	  * @param nextAnimation - The animation to delay.
	  * @param reduceMotion - Determines how the animation responds to the device's reduced motion accessibility setting. Default to `ReduceMotion.System` - {@link ReduceMotion}.
	  * @returns An [animation object](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animation-object) which holds the current state of the animation.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/animations/withDelay
	  */
	export const withDelay: withDelayType;
	export {};
}

declare module 'react-native-reanimated/reanimated2/animation/repeat' {
	import type { AnimationCallback, AnimatableValue, ReduceMotion } from 'react-native-reanimated/reanimated2/commonTypes';
	type withRepeatType = <T extends AnimatableValue>(animation: T, numberOfReps?: number, reverse?: boolean, callback?: AnimationCallback, reduceMotion?: ReduceMotion) => T;
	/**
	  * Lets you repeat an animation given number of times or run it indefinitely.
	  *
	  * @param animation - An animation object you want to repeat.
	  * @param numberOfReps - The number of times the animation is going to be repeated. Defaults to 2.
	  * @param reverse - Whether the animation should run in reverse every other repetition. Defaults to false.
	  * @param callback - A function called on animation complete.
	  * @param reduceMotion - Determines how the animation responds to the device's reduced motion accessibility setting. Default to `ReduceMotion.System` - {@link ReduceMotion}.
	  * @returns An [animation object](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animation-object) which holds the current state of the animation.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/animations/withRepeat
	  */
	export const withRepeat: withRepeatType;
	export {};
}

declare module 'react-native-reanimated/reanimated2/animation/sequence' {
	import type { AnimatableValue, ReduceMotion } from 'react-native-reanimated/reanimated2/commonTypes';
	/**
	  * Lets you run animations in a sequence.
	  *
	  * @param reduceMotion - Determines how the animation responds to the device's reduced motion accessibility setting. Default to `ReduceMotion.System` - {@link ReduceMotion}.
	  * @param animations - Any number of animation objects to be run in a sequence.
	  * @returns An [animation object](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animation-object) which holds the current state of the animation/
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/animations/withSequence
	  */
	export function withSequence<T extends AnimatableValue>(_reduceMotion: ReduceMotion, ...animations: T[]): T;
	export function withSequence<T extends AnimatableValue>(...animations: T[]): T;
}

declare module 'react-native-reanimated/reanimated2/animation/styleAnimation' {
	import type { AnimatedStyle } from 'react-native-reanimated/reanimated2/helperTypes';
	import type { StyleLayoutAnimation } from 'react-native-reanimated/reanimated2/animation/commonTypes';
	export function withStyleAnimation(styleAnimations: AnimatedStyle<any>): StyleLayoutAnimation;
}

declare module 'react-native-reanimated/reanimated2/platformFunctions/dispatchCommand' {
	import type { AnimatedRef } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	import type { Component } from 'react';
	type DispatchCommand = <T extends Component>(animatedRef: AnimatedRef<T>, commandName: string, args?: unknown[]) => void;
	/**
	  * Lets you synchronously call a command of a native component.
	  *
	  * @param animatedRef - An [animated ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef#returns) connected to the component you'd want to call the command on.
	  * @param commandName - The name of the command to dispatch (e.g. `"focus"` or `"scrollToEnd"`).
	  * @param args - An optional array of arguments for the command.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/dispatchCommand
	  */
	export let dispatchCommand: DispatchCommand;
	export {};
}

declare module 'react-native-reanimated/reanimated2/platformFunctions/measure' {
	import type { MeasuredDimensions } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { AnimatedRef } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	import type { Component } from 'react';
	type Measure = <T extends Component>(animatedRef: AnimatedRef<T>) => MeasuredDimensions | null;
	/**
	  * Lets you synchronously get the dimensions and position of a view on the screen.
	  *
	  * @param animatedRef - An [animated ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef#returns) connected to the component you'd want to get the measurements from.
	  * @returns An object containing component measurements or null when the measurement couldn't be performed- {@link MeasuredDimensions}.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/measure/
	  */
	export let measure: Measure;
	export {};
}

declare module 'react-native-reanimated/reanimated2/platformFunctions/scrollTo' {
	import type { AnimatedRef } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	import type { Component } from 'react';
	type ScrollTo = <T extends Component>(animatedRef: AnimatedRef<T>, x: number, y: number, animated: boolean) => void;
	/**
	  * Lets you synchronously scroll to a given position of a `ScrollView`.
	  *
	  * @param animatedRef - An [animated ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef) attached to an `Animated.ScrollView` component.
	  * @param x - The x position you want to scroll to.
	  * @param y - The y position you want to scroll to.
	  * @param animated - Whether the scrolling should be smooth or instant.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/scroll/scrollTo
	  */
	export let scrollTo: ScrollTo;
	export {};
}

declare module 'react-native-reanimated/reanimated2/platformFunctions/setGestureState' {
	type SetGestureState = (handlerTag: number, newState: number) => void;
	export let setGestureState: SetGestureState;
	export {};
}

declare module 'react-native-reanimated/reanimated2/platformFunctions/setNativeProps' {
	import type { StyleProps } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { AnimatedRef } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	import type { Component } from 'react';
	type SetNativeProps = <T extends Component>(animatedRef: AnimatedRef<T>, updates: StyleProps) => void;
	/**
	  * Lets you imperatively update component properties. You should always reach for [useAnimatedStyle](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedStyle) and [useAnimatedProps](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedProps) first when animating styles or properties.
	  *
	  * @param animatedRef - An [animated ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef#returns) connected to the component you'd want to update.
	  * @param updates - An object with properties you want to update.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/setNativeProps
	  */
	export let setNativeProps: SetNativeProps;
	export {};
}

declare module 'react-native-reanimated/reanimated2/platformFunctions/getRelativeCoords' {
	import type { Component } from 'react';
	import type { AnimatedRef } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	/**
		* An object which contains relative coordinates.
		*/
	export interface ComponentCoords {
			x: number;
			y: number;
	}
	/**
		* Lets you determines the location on the screen, relative to the given view.
		*
		* @param animatedRef - An [animated ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef#returns) connected to the component you'd want to get the coordinates from.
		* @param absoluteX - A number which is an absolute x coordinate.
		* @param absoluteY - A number which is an absolute y coordinate.
		* @returns An object which contains relative coordinates - {@link ComponentCoords}.
		* @see https://docs.swmansion.com/react-native-reanimated/docs/utilities/getRelativeCoords
		*/
	export function getRelativeCoords(animatedRef: AnimatedRef<Component>, absoluteX: number, absoluteY: number): ComponentCoords | null;
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder' {
	export { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/BaseAnimationBuilder';
	export { ComplexAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/ComplexAnimationBuilder';
	export { Keyframe } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/Keyframe';
	export { LayoutAnimationType, SharedTransitionType } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	export type { LayoutAnimation, AnimationFunction, EntryAnimationsValues, ExitAnimationsValues, EntryExitAnimationFunction, AnimationConfigFunction, IEntryAnimationBuilder, IExitAnimationBuilder, LayoutAnimationsValues, LayoutAnimationFunction, LayoutAnimationStartFunction, ILayoutAnimationBuilder, BaseLayoutAnimationConfig, BaseBuilderAnimationConfig, LayoutAnimationAndConfig, IEntryExitAnimationBuilder, } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations' {
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Flip';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Stretch';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Fade';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Slide';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Zoom';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Bounce';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Lightspeed';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Pinwheel';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Rotate';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Roll';
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions' {
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions/LinearTransition';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions/FadingTransition';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions/SequencedTransition';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions/JumpingTransition';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions/CurvedTransition';
	export * from 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions/EntryExitTransition';
}

declare module 'react-native-reanimated/reanimated2/frameCallback/FrameCallbackRegistryUI' {
	type CallbackDetails = {
		callback: (frameInfo: FrameInfo) => void;
		startTime: number | null;
	};
	export type FrameInfo = {
		timestamp: number;
		timeSincePreviousFrame: number | null;
		timeSinceFirstFrame: number;
	};
	export interface FrameCallbackRegistryUI {
		frameCallbackRegistry: Map<number, CallbackDetails>;
		activeFrameCallbacks: Set<number>;
		previousFrameTimestamp: number | null;
		runCallbacks: (callId: number) => void;
		nextCallId: number;
		registerFrameCallback: (callback: (frameInfo: FrameInfo) => void, callbackId: number) => void;
		unregisterFrameCallback: (callbackId: number) => void;
		manageStateFrameCallback: (callbackId: number, state: boolean) => void;
	}
	export const prepareUIRegistry: import("../commonTypes").WorkletFunction<[], void>;
	export {};
}

declare module 'react-native-reanimated/reanimated2/screenTransition/animationManager' {
	import type { ScreenTransitionConfig } from 'react-native-reanimated/reanimated2/screenTransition/commonTypes';
	export function startScreenTransition(screenTransitionConfig: ScreenTransitionConfig): void;
	export function finishScreenTransition(screenTransitionConfig: ScreenTransitionConfig): void;
}

declare module 'react-native-reanimated/reanimated2/screenTransition/presets' {
	import type { AnimatedScreenTransition } from 'react-native-reanimated/reanimated2/screenTransition/commonTypes';
	export const ScreenTransition: {
		SwipeRight: AnimatedScreenTransition;
		SwipeLeft: AnimatedScreenTransition;
		SwipeDown: AnimatedScreenTransition;
		SwipeUp: AnimatedScreenTransition;
		Horizontal: AnimatedScreenTransition;
		Vertical: AnimatedScreenTransition;
		TwoDimensional: AnimatedScreenTransition;
		SwipeRightFade: AnimatedScreenTransition;
	};
}

declare module 'react-native-reanimated/reanimated2/screenTransition/commonTypes' {
	import type { MeasuredDimensions, ShadowNodeWrapper, SharedValue } from 'react-native-reanimated/reanimated2/commonTypes';
	export type PanGestureHandlerEventPayload = {
		x: number;
		y: number;
		absoluteX: number;
		absoluteY: number;
		translationX: number;
		translationY: number;
		velocityX: number;
		velocityY: number;
	};
	export type AnimatedScreenTransition = {
		topScreenStyle: (event: PanGestureHandlerEventPayload, screenDimensions: MeasuredDimensions) => Record<string, unknown>;
		belowTopScreenStyle: (event: PanGestureHandlerEventPayload, screenDimensions: MeasuredDimensions) => Record<string, unknown>;
	};
	export type GoBackGesture = 'swipeRight' | 'swipeLeft' | 'swipeUp' | 'swipeDown' | 'verticalSwipe' | 'horizontalSwipe' | 'twoDimensionalSwipe';
	export type ScreenTransitionConfig = {
		stackTag: number;
		belowTopScreenId: number | ShadowNodeWrapper;
		topScreenId: number | ShadowNodeWrapper;
		screenTransition: AnimatedScreenTransition;
		sharedEvent: SharedValue<PanGestureHandlerEventPayload>;
		startingGesturePosition: SharedValue<PanGestureHandlerEventPayload>;
		onFinishAnimation?: () => void;
		isTransitionCanceled: boolean;
		goBackGesture: GoBackGesture;
		screenDimensions: MeasuredDimensions;
	};
	export type RNScreensTurboModuleType = {
		startTransition: (stackTag: number) => {
			topScreenId: number | ShadowNodeWrapper;
			belowTopScreenId: number | ShadowNodeWrapper;
			canStartTransition: boolean;
		};
		updateTransition: (stackTag: number, progress: number) => void;
		finishTransition: (stackTag: number, isCanceled: boolean) => void;
	};
	export type LockAxis = 'x' | 'y' | undefined;
}

declare module 'react-native-reanimated/reanimated2/ViewDescriptorsSet' {
	import type { SharedValue } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { Descriptor } from 'react-native-reanimated/reanimated2/hook/commonTypes';
	export interface ViewRefSet<T> {
		items: Set<T>;
		add: (item: T) => void;
		remove: (item: T) => void;
	}
	export interface ViewDescriptorsSet {
		shareableViewDescriptors: SharedValue<Descriptor[]>;
		add: (item: Descriptor) => void;
		remove: (viewTag: number) => void;
	}
	export function makeViewDescriptorsSet(): ViewDescriptorsSet;
	export const useViewRefSet: typeof useViewRefSetJS | typeof useViewRefSetNative;
	function useViewRefSetNative(): undefined;
	function useViewRefSetJS<T>(): ViewRefSet<T>;
	export {};
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/sharedTransitions/SharedTransition' {
	import type { SharedTransitionAnimationsValues, CustomProgressAnimation } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import { SharedTransitionType } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import type { StyleProps } from 'react-native-reanimated/reanimated2/commonTypes';
	import { ReduceMotion } from 'react-native-reanimated/reanimated2/commonTypes';
	type AnimationFactory = (values: SharedTransitionAnimationsValues) => StyleProps;
	/**
		* A SharedTransition builder class.
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/shared-element-transitions/overview
		* @experimental
		*/
	export class SharedTransition {
			custom(customAnimationFactory: AnimationFactory): SharedTransition;
			progressAnimation(progressAnimationCallback: CustomProgressAnimation): SharedTransition;
			duration(duration: number): SharedTransition;
			reduceMotion(_reduceMotion: ReduceMotion): this;
			defaultTransitionType(transitionType: SharedTransitionType): SharedTransition;
			registerTransition(viewTag: number, sharedTransitionTag: string, isUnmounting?: boolean): void;
			unregisterTransition(viewTag: number, isUnmounting?: boolean): void;
			getReduceMotion(): ReduceMotion;
			/**
				* Lets you create a custom shared transition animation. Other shared transition modifiers can be chained alongside this modifier.
				*
				* @param customAnimationFactory - Callback function that have to return an object with styles for the custom shared transition.
				* @returns A {@link SharedTransition} object. Styles returned from this function need to be to the `sharedTransitionStyle` prop.
				* @see https://docs.swmansion.com/react-native-reanimated/docs/shared-element-transitions/overview
				* @experimental
				*/
			static custom(customAnimationFactory: AnimationFactory): SharedTransition;
			/**
				* Lets you change the duration of the shared transition. Other shared transition modifiers can be chained alongside this modifier.
				*
				* @param duration - The duration of the shared transition animation in milliseconds.
				* @see https://docs.swmansion.com/react-native-reanimated/docs/shared-element-transitions/overview
				* @experimental
				*/
			static duration(duration: number): SharedTransition;
			/**
				* Lets you create a shared transition animation bound to the progress between navigation screens. Other shared transition modifiers can be chained alongside this modifier.
				*
				* @param progressAnimationCallback - A callback called with the current progress value on every animation frame. It should return an object with styles for the shared transition.
				* @see https://docs.swmansion.com/react-native-reanimated/docs/shared-element-transitions/overview
				* @experimental
				*/
			static progressAnimation(progressAnimationCallback: CustomProgressAnimation): SharedTransition;
			/**
				* Whether the transition is progress-bound or not. Other shared transition modifiers can be chained alongside this modifier.
				*
				* @param transitionType - Type of the transition. Configured with {@link SharedTransitionType} enum.
				* @see https://docs.swmansion.com/react-native-reanimated/docs/shared-element-transitions/overview
				* @experimental
				*/
			static defaultTransitionType(transitionType: SharedTransitionType): SharedTransition;
			/**
				* Lets you adjust the behavior when the device's reduced motion accessibility setting is turned on. Other shared transition modifiers can be chained alongside this modifier.
				*
				* @param reduceMotion - Determines how the animation responds to the device's reduced motion accessibility setting. Default to `ReduceMotion.System` - {@link ReduceMotion}.
				* @see https://docs.swmansion.com/react-native-reanimated/docs/shared-element-transitions/overview
				* @experimental
				*/
			static reduceMotion(reduceMotion: ReduceMotion): SharedTransition;
	}
	export {};
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/sharedTransitions/ProgressTransitionManager' {
	import type { ProgressAnimation, SharedTransitionAnimationsValues } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	export class ProgressTransitionManager {
		addProgressAnimation(viewTag: number, progressAnimation: ProgressAnimation): void;
		removeProgressAnimation(viewTag: number, isUnmounting?: boolean): void;
	}
	function createProgressTransitionRegister(): {
		addProgressAnimation: (viewTag: number, progressAnimation: ProgressAnimation) => void;
		removeProgressAnimation: (viewTag: number, isUnmounting: boolean) => void;
		onTransitionStart: (viewTag: number, snapshot: Partial<SharedTransitionAnimationsValues>) => void;
		frame: (progress: number) => void;
		onAndroidFinishTransitioning: () => void;
		onTransitionEnd: (removeViews?: boolean) => void;
	};
	export type ProgressTransitionRegister = ReturnType<typeof createProgressTransitionRegister>;
	export {};
}

declare module 'react-native-reanimated/createAnimatedComponent/commonTypes' {
	import type { Ref, Component } from 'react';
	import type { StyleProps, BaseAnimationBuilder, ILayoutAnimationBuilder, EntryExitAnimationFunction, SharedTransition, SharedValue } from 'react-native-reanimated/reanimated2';
	import type { ViewDescriptorsSet, ViewRefSet } from 'react-native-reanimated/reanimated2/ViewDescriptorsSet';
	import type { SkipEnteringContext } from 'react-native-reanimated/reanimated2/component/LayoutAnimationConfig';
	import type { ShadowNodeWrapper } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { ViewConfig } from 'react-native-reanimated/ConfigHelper';
	export interface AnimatedProps extends Record<string, unknown> {
		viewDescriptors?: ViewDescriptorsSet;
		viewsRef?: ViewRefSet<unknown>;
		initial?: SharedValue<StyleProps>;
	}
	export interface ViewInfo {
		viewTag: number | HTMLElement | null;
		viewName: string | null;
		shadowNodeWrapper: ShadowNodeWrapper | null;
		viewConfig: ViewConfig;
	}
	export interface IInlinePropManager {
		attachInlineProps(animatedComponent: React.Component<unknown, unknown>, viewInfo: ViewInfo): void;
		detachInlineProps(): void;
	}
	export interface IPropsFilter {
		filterNonAnimatedProps: (component: React.Component<unknown, unknown> & IAnimatedComponentInternal) => Record<string, unknown>;
	}
	export interface IJSPropsUpdater {
		addOnJSPropsChangeListener(animatedComponent: React.Component<unknown, unknown> & IAnimatedComponentInternal): void;
		removeOnJSPropsChangeListener(animatedComponent: React.Component<unknown, unknown> & IAnimatedComponentInternal): void;
	}
	export type LayoutAnimationStaticContext = {
		presetName: string;
	};
	export type AnimatedComponentProps<P extends Record<string, unknown>> = P & {
		forwardedRef?: Ref<Component>;
		style?: NestedArray<StyleProps>;
		animatedProps?: Partial<AnimatedComponentProps<AnimatedProps>>;
		animatedStyle?: StyleProps;
		layout?: (BaseAnimationBuilder | ILayoutAnimationBuilder | typeof BaseAnimationBuilder) & LayoutAnimationStaticContext;
		entering?: (BaseAnimationBuilder | typeof BaseAnimationBuilder | EntryExitAnimationFunction | Keyframe) & LayoutAnimationStaticContext;
		exiting?: (BaseAnimationBuilder | typeof BaseAnimationBuilder | EntryExitAnimationFunction | Keyframe) & LayoutAnimationStaticContext;
		sharedTransitionTag?: string;
		sharedTransitionStyle?: SharedTransition;
	};
	export interface AnimatedComponentRef extends Component {
		setNativeProps?: (props: Record<string, unknown>) => void;
		getScrollableNode?: () => AnimatedComponentRef;
		getAnimatableRef?: () => AnimatedComponentRef;
	}
	export interface IAnimatedComponentInternal {
		_styles: StyleProps[] | null;
		_animatedProps?: Partial<AnimatedComponentProps<AnimatedProps>>;
		_viewTag: number;
		_isFirstRender: boolean;
		jestAnimatedStyle: {
			value: StyleProps;
		};
		_component: AnimatedComponentRef | HTMLElement | null;
		_sharedElementTransition: SharedTransition | null;
		_jsPropsUpdater: IJSPropsUpdater;
		_InlinePropManager: IInlinePropManager;
		_PropsFilter: IPropsFilter;
		_viewInfo?: ViewInfo;
		context: React.ContextType<typeof SkipEnteringContext>;
	}
	export type NestedArray<T> = T | NestedArray<T>[];
	export interface InitialComponentProps extends Record<string, unknown> {
		ref?: Ref<Component>;
		collapsable?: boolean;
	}
}

declare module 'react-native-reanimated/reanimated2/animation/decay/decay' {
	import type { AnimationCallback } from 'react-native-reanimated/reanimated2/commonTypes';
	import type { DecayConfig } from 'react-native-reanimated/reanimated2/animation/decay/utils';
	export type WithDecayConfig = DecayConfig;
	type withDecayType = (userConfig: DecayConfig, callback?: AnimationCallback) => number;
	/**
	  * Lets you create animations that mimic objects in motion with friction.
	  *
	  * @param config - The decay animation configuration - {@link DecayConfig}.
	  * @param callback - A function called upon animation completion - {@link AnimationCallback}.
	  * @returns An [animation object](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animation-object) which holds the current state of the animation.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/animations/withDecay
	  */
	export const withDecay: withDecayType;
	export {};
}

declare module 'react-native-reanimated/reanimated2/animation/decay/utils' {
	import type { AnimatableValue, AnimationObject, Animation, ReduceMotion, Timestamp, RequiredKeys } from 'react-native-reanimated/reanimated2/commonTypes';
	export const VELOCITY_EPS: number;
	export const SLOPE_FACTOR = 0.1;
	export interface DecayAnimation extends Animation<DecayAnimation> {
		lastTimestamp: Timestamp;
		startTimestamp: Timestamp;
		initialVelocity: number;
		velocity: number;
		current: AnimatableValue;
	}
	export interface InnerDecayAnimation extends Omit<DecayAnimation, 'current'>, AnimationObject {
		current: number;
		springActive?: boolean;
	}
	/**
	  * The decay animation configuration.
	  *
	  * @param velocity - Initial velocity of the animation. Defaults to 0.
	  * @param deceleration - The rate at which the velocity decreases over time. Defaults to 0.998.
	  * @param clamp - Array of two numbers which restricts animation's range. Defaults to [].
	  * @param velocityFactor - Velocity multiplier. Defaults to 1.
	  * @param rubberBandEffect - Makes the animation bounce over the limit specified in `clamp`. Defaults to `false`.
	  * @param rubberBandFactor - Strength of the rubber band effect. Defaults to 0.6.
	  * @param reduceMotion - Determines how the animation responds to the device's reduced motion accessibility setting. Default to `ReduceMotion.System` - {@link ReduceMotion}.
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/animations/withDecay#config
	  */
	export type DecayConfig = {
		deceleration?: number;
		velocityFactor?: number;
		velocity?: number;
		reduceMotion?: ReduceMotion;
	} & ({
		rubberBandEffect?: false;
		clamp?: [min: number, max: number];
	} | {
		rubberBandEffect: true;
		clamp: [min: number, max: number];
		rubberBandFactor?: number;
	});
	export type DefaultDecayConfig = RequiredKeys<DecayConfig, 'deceleration' | 'velocityFactor' | 'velocity'> & {
		rubberBandFactor: number;
	};
	export type RubberBandDecayConfig = RequiredKeys<DefaultDecayConfig, 'clamp'> & {
		rubberBandEffect: true;
	};
	export function isValidRubberBandConfig(config: DefaultDecayConfig): config is RubberBandDecayConfig;
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/ComplexAnimationBuilder' {
	import type { AnimationFunction, LayoutAnimationAndConfig } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import type { EasingFunction } from 'react-native-reanimated/reanimated2/Easing';
	import { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/BaseAnimationBuilder';
	import type { StyleProps } from 'react-native-reanimated/reanimated2/commonTypes';
	export class ComplexAnimationBuilder extends BaseAnimationBuilder {
			easingV?: EasingFunction;
			rotateV?: string;
			type?: AnimationFunction;
			dampingV?: number;
			dampingRatioV?: number;
			massV?: number;
			stiffnessV?: number;
			overshootClampingV?: number;
			restDisplacementThresholdV?: number;
			restSpeedThresholdV?: number;
			initialValues?: StyleProps;
			static createInstance: <T extends typeof BaseAnimationBuilder>(this: T) => InstanceType<T>;
			/**
				* Lets you change the easing curve of the animation. Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param easingFunction - An easing function which defines the animation curve.
				*/
			static easing<T extends typeof ComplexAnimationBuilder>(this: T, easingFunction: EasingFunction): InstanceType<T>;
			easing(easingFunction: EasingFunction): this;
			/**
				* Lets you rotate the element. Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param degree - The rotation degree.
				*/
			static rotate<T extends typeof ComplexAnimationBuilder>(this: T, degree: string): InstanceType<T>;
			rotate(degree: string): this;
			/**
				* Enables the spring-based animation configuration. Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param duration - An optional duration of the spring animation (in milliseconds).
				*/
			static springify<T extends typeof ComplexAnimationBuilder>(this: T, duration?: number): ComplexAnimationBuilder;
			springify(duration?: number): this;
			/**
				* Lets you adjust the spring animation damping ratio. Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param dampingRatio - How damped the spring is.
				*/
			static dampingRatio<T extends typeof ComplexAnimationBuilder>(this: T, dampingRatio: number): InstanceType<T>;
			dampingRatio(value: number): this;
			/**
				* Lets you adjust the spring animation damping. Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param value - Decides how quickly a spring stops moving. Higher damping means the spring will come to rest faster.
				*/
			static damping<T extends typeof ComplexAnimationBuilder>(this: T, damping: number): InstanceType<T>;
			damping(damping: number): this;
			/**
				* Lets you adjust the spring animation mass. Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param mass - The weight of the spring. Reducing this value makes the animation faster.
				*/
			static mass<T extends typeof ComplexAnimationBuilder>(this: T, mass: number): InstanceType<T>;
			mass(mass: number): this;
			/**
				* Lets you adjust the stiffness of the spring animation. Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param stiffness - How bouncy the spring is.
				*/
			static stiffness<T extends typeof ComplexAnimationBuilder>(this: T, stiffness: number): InstanceType<T>;
			stiffness(stiffness: number): this;
			/**
				* Lets you adjust overshoot clamping of the spring. Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param overshootClamping - Whether a spring can bounce over the final position.
				*/
			static overshootClamping<T extends typeof ComplexAnimationBuilder>(this: T, overshootClamping: number): InstanceType<T>;
			overshootClamping(overshootClamping: number): this;
			/**
				* Lets you adjust the rest displacement threshold of the spring animation. Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param restDisplacementThreshold - The displacement below which the spring will snap to the designated position without further oscillations.
				*/
			static restDisplacementThreshold<T extends typeof ComplexAnimationBuilder>(this: T, restDisplacementThreshold: number): InstanceType<T>;
			restDisplacementThreshold(restDisplacementThreshold: number): this;
			/**
				* Lets you adjust the rest speed threshold of the spring animation. Can be chained alongside other [layout animation modifiers](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#layout-animation-modifier).
				*
				* @param restSpeedThreshold - The speed in pixels per second from which the spring will snap to the designated position without further oscillations.
				*/
			static restSpeedThreshold<T extends typeof ComplexAnimationBuilder>(this: T, restSpeedThreshold: number): InstanceType<T>;
			restSpeedThreshold(restSpeedThreshold: number): this;
			/**
				* Lets you override the initial config of the animation
				*
				* @param values - An object containing the styles to override.
				*/
			static withInitialValues<T extends typeof ComplexAnimationBuilder>(this: T, values: StyleProps): InstanceType<T>;
			withInitialValues(values: StyleProps): this;
			getAnimationAndConfig(): LayoutAnimationAndConfig;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Flip' {
	import type { IEntryExitAnimationBuilder, EntryExitAnimationFunction, EntryAnimationsValues, ExitAnimationsValues, AnimationConfigFunction, IEntryAnimationBuilder, IExitAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import type { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import { ComplexAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	/**
		* Rotate from top on the X axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#flip
		*/
	export class FlipInXUp extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Rotate from left on the Y axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#flip
		*/
	export class FlipInYLeft extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Rotate from bottom on the X axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#flip
		*/
	export class FlipInXDown extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Rotate from right on the Y axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#flip
		*/
	export class FlipInYRight extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Eased rotate in on the X axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#flip
		*/
	export class FlipInEasyX extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Eased rotate in on the Y axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#flip
		*/
	export class FlipInEasyY extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Rotate to top animation on the X axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#flip
		*/
	export class FlipOutXUp extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
	/**
		* Rotate to left on the Y axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#flip
		*/
	export class FlipOutYLeft extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
	/**
		* Rotate to bottom on the X axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#flip
		*/
	export class FlipOutXDown extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
	/**
		* Rotate to right animation on the Y axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#flip
		*/
	export class FlipOutYRight extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
	/**
		* Eased rotate on the X axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#flip
		*/
	export class FlipOutEasyX extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Eased rotate on the Y axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#flip
		*/
	export class FlipOutEasyY extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Stretch' {
	import type { IEntryExitAnimationBuilder, EntryExitAnimationFunction } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import type { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import { ComplexAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	/**
		* Stretch animation on the X axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch
		*/
	export class StretchInX extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Stretch animation on the Y axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch
		*/
	export class StretchInY extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Stretch animation on the X axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch
		*/
	export class StretchOutX extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Stretch animation on the Y axis. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#stretch
		*/
	export class StretchOutY extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Fade' {
	import type { IEntryExitAnimationBuilder, EntryExitAnimationFunction } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import type { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import { ComplexAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	/**
		* Fade in animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		*  You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#fade
		*/
	export class FadeIn extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Fade from right animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#fade
		*/
	export class FadeInRight extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Fade from left animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#fade
		*/
	export class FadeInLeft extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Fade from top animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#fade
		*/
	export class FadeInUp extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Fade from bottom animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#fade
		*/
	export class FadeInDown extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Fade out animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#fade
		*/
	export class FadeOut extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Fade to right animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#fade
		*/
	export class FadeOutRight extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Fade to left animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#fade
		*/
	export class FadeOutLeft extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Fade to top animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#fade
		*/
	export class FadeOutUp extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Fade to bottom animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#fade
		*/
	export class FadeOutDown extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Slide' {
	import type { EntryAnimationsValues, ExitAnimationsValues, AnimationConfigFunction, IEntryAnimationBuilder, IExitAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import type { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import { ComplexAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	/**
		* Slide from right animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#slide
		*/
	export class SlideInRight extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Slide from left animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#slide
		*/
	export class SlideInLeft extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Slide to right animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#slide
		*/
	export class SlideOutRight extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
	/**
		* Slide to left animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#slide
		*/
	export class SlideOutLeft extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
	/**
		* Slide from top animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#slide
		*/
	export class SlideInUp extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Slide from bottom animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#slide
		*/
	export class SlideInDown extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Slide to top animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#slide
		*/
	export class SlideOutUp extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
	/**
		* Slide to bottom animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#slide
		*/
	export class SlideOutDown extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Zoom' {
	import type { IEntryExitAnimationBuilder, EntryExitAnimationFunction, EntryAnimationsValues, ExitAnimationsValues, AnimationConfigFunction, IEntryAnimationBuilder, IExitAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import type { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import { ComplexAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	/**
		* Scale from center animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomIn extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Scale from center with rotation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomInRotate extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Scale from left animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomInLeft extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Scale from right animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomInRight extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Scale from top animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomInUp extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Scale from bottom animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomInDown extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Eased scale from top animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomInEasyUp extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Eased scale from bottom animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomInEasyDown extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Scale to center animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomOut extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Scale to center with rotation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomOutRotate extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Scale to left animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomOutLeft extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Scale to right animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomOutRight extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Scale to top animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomOutUp extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Scale to bottom animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomOutDown extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Eased scale to top animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomOutEasyUp extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
	/**
		* Eased scale to bottom animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#zoom
		*/
	export class ZoomOutEasyDown extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Bounce' {
	import type { EntryExitAnimationFunction, IEntryExitAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import type { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import { ComplexAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	/**
		* Bounce entering animation. You can modify the behavior by chaining methods like `.delay(300)` or `.duration(100)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#bounce
		*/
	export class BounceIn extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			static getDuration(): number;
			getDuration(): number;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Bounce from bottom animation. You can modify the behavior by chaining methods like `.delay(300)` or `.duration(100)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#bounce
		*/
	export class BounceInDown extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			static getDuration(): number;
			getDuration(): number;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Bounce from top animation. You can modify the behavior by chaining methods like `.delay(300)` or `.duration(100)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#bounce
		*/
	export class BounceInUp extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			static getDuration(): number;
			getDuration(): number;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Bounce from left animation. You can modify the behavior by chaining methods like `.delay(300)` or `.duration(100)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#bounce
		*/
	export class BounceInLeft extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			static getDuration(): number;
			getDuration(): number;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Bounce from right animation. You can modify the behavior by chaining methods like `.delay(300)` or `.duration(100)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#bounce
		*/
	export class BounceInRight extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			static getDuration(): number;
			getDuration(): number;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Bounce exiting animation. You can modify the behavior by chaining methods like `.delay(300)` or `.duration(100)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#bounce
		*/
	export class BounceOut extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			static getDuration(): number;
			getDuration(): number;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Bounce to bottom animation. You can modify the behavior by chaining methods like `.delay(300)` or `.duration(100)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#bounce
		*/
	export class BounceOutDown extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			static getDuration(): number;
			getDuration(): number;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Bounce to top animation. You can modify the behavior by chaining methods like `.delay(300)` or `.duration(100)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#bounce
		*/
	export class BounceOutUp extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			static getDuration(): number;
			getDuration(): number;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Bounce to left animation. You can modify the behavior by chaining methods like `.delay(300)` or `.duration(100)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#bounce
		*/
	export class BounceOutLeft extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			static getDuration(): number;
			getDuration(): number;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Bounce to right animation. You can modify the behavior by chaining methods like `.delay(300)` or `.duration(100)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#bounce
		*/
	export class BounceOutRight extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			static getDuration(): number;
			getDuration(): number;
			build: () => EntryExitAnimationFunction;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Lightspeed' {
	import type { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import { ComplexAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import type { EntryExitAnimationFunction, IEntryExitAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	/**
		* Entry from right animation with change in skew and opacity. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#lightspeed
		*/
	export class LightSpeedInRight extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Entry from left animation with change in skew and opacity. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#lightspeed
		*/
	export class LightSpeedInLeft extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Exit to right animation with change in skew and opacity. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#lightspeed
		*/
	export class LightSpeedOutRight extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Exit to left animation with change in skew and opacity. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations/#lightspeed
		*/
	export class LightSpeedOutLeft extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Pinwheel' {
	import type { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import { ComplexAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import type { EntryExitAnimationFunction, IEntryExitAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	/**
		* Entry with change in rotation, scale, and opacity. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#pinwheel
		*/
	export class PinwheelIn extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Exit with change in rotation, scale, and opacity. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#pinwheel
		*/
	export class PinwheelOut extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Rotate' {
	import type { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import { ComplexAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import type { EntryAnimationsValues, ExitAnimationsValues, AnimationConfigFunction, IEntryAnimationBuilder, IExitAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	/**
		* Rotate to bottom from left edge. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#rotate
		*/
	export class RotateInDownLeft extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Rotate to bottom from right edge. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#rotate
		*/
	export class RotateInDownRight extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Rotate to top from left edge. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#rotate
		*/
	export class RotateInUpLeft extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Rotate to top from right edge. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#rotate
		*/
	export class RotateInUpRight extends ComplexAnimationBuilder implements IEntryAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<EntryAnimationsValues>;
	}
	/**
		* Rotate to bottom from left edge. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#rotate
		*/
	export class RotateOutDownLeft extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
	/**
		* Rotate to bottom from right edge. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#rotate
		*/
	export class RotateOutDownRight extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
	/**
		* Rotate to top from left edge. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#rotate
		*/
	export class RotateOutUpLeft extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
	/**
		* Rotate to top from right edge. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#rotate
		*/
	export class RotateOutUpRight extends ComplexAnimationBuilder implements IExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => AnimationConfigFunction<ExitAnimationsValues>;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultAnimations/Roll' {
	import type { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import { ComplexAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import type { EntryExitAnimationFunction, IEntryExitAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	/**
		* Roll from left animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#roll
		*/
	export class RollInLeft extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Roll from right animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `entering` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#roll
		*/
	export class RollInRight extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Roll to left animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#roll
		*/
	export class RollOutLeft extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
	/**
		* Roll to right animation. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `exiting` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/entering-exiting-animations#roll
		*/
	export class RollOutRight extends ComplexAnimationBuilder implements IEntryExitAnimationBuilder {
			static presetName: string;
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => EntryExitAnimationFunction;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions/LinearTransition' {
	import type { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import { ComplexAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import type { ILayoutAnimationBuilder, LayoutAnimationFunction } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	/**
		* Linearly transforms the layout from one position to another. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
		*
		* You pass it to the `layout` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
		*
		* @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/layout-transitions#linear-transition
		*/
	export class LinearTransition extends ComplexAnimationBuilder implements ILayoutAnimationBuilder {
			static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
			build: () => LayoutAnimationFunction;
	}
	/**
		* @deprecated Please use {@link LinearTransition} instead.
		*/
	export const Layout: typeof LinearTransition;
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions/FadingTransition' {
	import type { ILayoutAnimationBuilder, LayoutAnimationFunction } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	/**
	  * Fades out components from one position and shows them in another. You can modify the behavior by chaining methods like `.duration(500)` or `.delay(500)`.
	  *
	  * You pass it to the `layout` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
	  *
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/layout-transitions#fading-transition
	  */
	export class FadingTransition extends BaseAnimationBuilder implements ILayoutAnimationBuilder {
		static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
		build: () => LayoutAnimationFunction;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions/SequencedTransition' {
	import type { ILayoutAnimationBuilder, LayoutAnimationFunction } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	/**
	  * Transforms layout starting from the X-axis and width first, followed by the Y-axis and height. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
	  *
	  * You pass it to the `layout` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
	  *
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/layout-transitions#sequenced-transition
	  */
	export class SequencedTransition extends BaseAnimationBuilder implements ILayoutAnimationBuilder {
		reversed: boolean;
		static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
		static reverse(): SequencedTransition;
		reverse(): SequencedTransition;
		build: () => LayoutAnimationFunction;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions/JumpingTransition' {
	import type { ILayoutAnimationBuilder, LayoutAnimationFunction } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	/**
	  * Layout jumps - quite literally - from one position to another. You can modify the behavior by chaining methods like `.springify()` or `.duration(500)`.
	  *
	  * You pass it to the `layout` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
	  *
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/layout-transitions#jumping-transition
	  */
	export class JumpingTransition extends BaseAnimationBuilder implements ILayoutAnimationBuilder {
		static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
		build: () => LayoutAnimationFunction;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions/CurvedTransition' {
	import type { ILayoutAnimationBuilder, LayoutAnimationFunction } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	import type { EasingFunction } from 'react-native-reanimated/reanimated2/Easing';
	/**
	  * Layout transitions with a curved animation. You can modify the behavior by chaining methods like `.duration(500)` or `.delay(500)`.
	  *
	  * You pass it to the `layout` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
	  *
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/layout-transitions#fading-transition
	  */
	export class CurvedTransition extends BaseAnimationBuilder implements ILayoutAnimationBuilder {
		easingXV: EasingFunction;
		easingYV: EasingFunction;
		easingWidthV: EasingFunction;
		easingHeightV: EasingFunction;
		static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
		static easingX(easing: EasingFunction): CurvedTransition;
		easingX(easing: EasingFunction): CurvedTransition;
		static easingY(easing: EasingFunction): CurvedTransition;
		easingY(easing: EasingFunction): CurvedTransition;
		static easingWidth(easing: EasingFunction): CurvedTransition;
		easingWidth(easing: EasingFunction): CurvedTransition;
		static easingHeight(easing: EasingFunction): CurvedTransition;
		easingHeight(easing: EasingFunction): CurvedTransition;
		build: () => LayoutAnimationFunction;
	}
}

declare module 'react-native-reanimated/reanimated2/layoutReanimation/defaultTransitions/EntryExitTransition' {
	import type { ILayoutAnimationBuilder, LayoutAnimationFunction } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder/commonTypes';
	import { BaseAnimationBuilder } from 'react-native-reanimated/reanimated2/layoutReanimation/animationBuilder';
	export class EntryExitTransition extends BaseAnimationBuilder implements ILayoutAnimationBuilder {
		enteringV: BaseAnimationBuilder | typeof BaseAnimationBuilder;
		exitingV: BaseAnimationBuilder | typeof BaseAnimationBuilder;
		static createInstance<T extends typeof BaseAnimationBuilder>(this: T): InstanceType<T>;
		static entering(animation: BaseAnimationBuilder | typeof BaseAnimationBuilder): EntryExitTransition;
		entering(animation: BaseAnimationBuilder | typeof BaseAnimationBuilder): EntryExitTransition;
		static exiting(animation: BaseAnimationBuilder | typeof BaseAnimationBuilder): EntryExitTransition;
		exiting(animation: BaseAnimationBuilder | typeof BaseAnimationBuilder): EntryExitTransition;
		build: () => LayoutAnimationFunction;
	}
	/**
	  * Lets you combine two layout animations into a layout transition. You can modify the behavior by chaining methods like `.delay(500)`.
	  *
	  * @param exiting - Layout animation used when components are removed from layout (eg. `FadeOut`).
	  * @param entering - Layout animation used when components are added to layout (eg. `FadeIn`).
	  * @returns A custom layout transition. You pass it to the `layout` prop on [an Animated component](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#animated-component).
	  * @see https://docs.swmansion.com/react-native-reanimated/docs/layout-animations/layout-transitions#combine-transition
	  */
	export function combineTransition(exiting: BaseAnimationBuilder | typeof BaseAnimationBuilder, entering: BaseAnimationBuilder | typeof BaseAnimationBuilder): EntryExitTransition;
}

