// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../../../../react
//   ../../../../../react-native
//   ../../../../../react-native/Libraries/Types/CodegenTypes

declare module 'react-native-svg' {
	export * from 'react-native-svg/ReactNativeSVG';
	export { default } from 'react-native-svg/ReactNativeSVG';
}

declare module 'react-native-svg/ReactNativeSVG' {
	import Shape from 'react-native-svg/elements/Shape';
	import Rect from 'react-native-svg/elements/Rect';
	import Circle from 'react-native-svg/elements/Circle';
	import Ellipse from 'react-native-svg/elements/Ellipse';
	import Polygon from 'react-native-svg/elements/Polygon';
	import Polyline from 'react-native-svg/elements/Polyline';
	import Line from 'react-native-svg/elements/Line';
	import Svg from 'react-native-svg/elements/Svg';
	import Path from 'react-native-svg/elements/Path';
	import G from 'react-native-svg/elements/G';
	import Text from 'react-native-svg/elements/Text';
	import TSpan from 'react-native-svg/elements/TSpan';
	import TextPath from 'react-native-svg/elements/TextPath';
	import Use from 'react-native-svg/elements/Use';
	import Image from 'react-native-svg/elements/Image';
	import Symbol from 'react-native-svg/elements/Symbol';
	import Defs from 'react-native-svg/elements/Defs';
	import LinearGradient from 'react-native-svg/elements/LinearGradient';
	import RadialGradient from 'react-native-svg/elements/RadialGradient';
	import Stop from 'react-native-svg/elements/Stop';
	import ClipPath from 'react-native-svg/elements/ClipPath';
	import Pattern from 'react-native-svg/elements/Pattern';
	import Mask from 'react-native-svg/elements/Mask';
	import Marker from 'react-native-svg/elements/Marker';
	import ForeignObject from 'react-native-svg/elements/ForeignObject';
	import { parse, SvgAst, SvgFromUri, SvgFromXml, SvgUri, SvgXml, camelCase, err, fetchText, JsxAST, Middleware, Styles, UriProps, UriState, XmlAST, XmlProps, XmlState, AstProps } from 'react-native-svg/xml';
	import { RNSVGCircle, RNSVGClipPath, RNSVGDefs, RNSVGEllipse, RNSVGForeignObject, RNSVGGroup, RNSVGImage, RNSVGLine, RNSVGLinearGradient, RNSVGMarker, RNSVGMask, RNSVGPath, RNSVGPattern, RNSVGRadialGradient, RNSVGRect, RNSVGSvgAndroid, RNSVGSvgIOS, RNSVGSymbol, RNSVGText, RNSVGTextPath, RNSVGTSpan, RNSVGUse } from 'react-native-svg/fabric';
	export { SvgCss, SvgCssUri, SvgWithCss, SvgWithCssUri, inlineStyles, LocalSvg, WithLocalSvg, loadLocalRawResource, } from 'react-native-svg/deprecated';
	export type { RectProps } from 'react-native-svg/elements/Rect';
	export type { CircleProps } from 'react-native-svg/elements/Circle';
	export type { EllipseProps } from 'react-native-svg/elements/Ellipse';
	export type { PolygonProps } from 'react-native-svg/elements/Polygon';
	export type { PolylineProps } from 'react-native-svg/elements/Polyline';
	export type { LineProps } from 'react-native-svg/elements/Line';
	export type { SvgProps } from 'react-native-svg/elements/Svg';
	export type { PathProps } from 'react-native-svg/elements/Path';
	export type { GProps } from 'react-native-svg/elements/G';
	export type { TextProps } from 'react-native-svg/elements/Text';
	export type { TSpanProps } from 'react-native-svg/elements/TSpan';
	export type { TextPathProps } from 'react-native-svg/elements/TextPath';
	export type { UseProps } from 'react-native-svg/elements/Use';
	export type { ImageProps } from 'react-native-svg/elements/Image';
	export type { SymbolProps } from 'react-native-svg/elements/Symbol';
	export type { LinearGradientProps } from 'react-native-svg/elements/LinearGradient';
	export type { RadialGradientProps } from 'react-native-svg/elements/RadialGradient';
	export type { StopProps } from 'react-native-svg/elements/Stop';
	export type { ClipPathProps } from 'react-native-svg/elements/ClipPath';
	export type { PatternProps } from 'react-native-svg/elements/Pattern';
	export type { MaskProps } from 'react-native-svg/elements/Mask';
	export type { MarkerProps } from 'react-native-svg/elements/Marker';
	export type { ForeignObjectProps } from 'react-native-svg/elements/ForeignObject';
	export * from 'react-native-svg/lib/extract/types';
	export { Svg, Circle, Ellipse, G, Text, TSpan, TextPath, Path, Polygon, Polyline, Line, Rect, Use, Image, Symbol, Defs, LinearGradient, RadialGradient, Stop, ClipPath, Pattern, Mask, Marker, ForeignObject, parse, SvgAst, SvgFromUri, SvgFromXml, SvgUri, SvgXml, camelCase, err, fetchText, Shape, RNSVGMarker, RNSVGMask, RNSVGPattern, RNSVGClipPath, RNSVGRadialGradient, RNSVGLinearGradient, RNSVGDefs, RNSVGSymbol, RNSVGImage, RNSVGUse, RNSVGTextPath, RNSVGTSpan, RNSVGText, RNSVGGroup, RNSVGPath, RNSVGLine, RNSVGEllipse, RNSVGCircle, RNSVGRect, RNSVGSvgAndroid, RNSVGSvgIOS, RNSVGForeignObject, };
	export type { JsxAST, Middleware, Styles, UriProps, UriState, XmlAST, XmlProps, XmlState, AstProps, };
	export default Svg;
}

declare module 'react-native-svg/elements/Shape' {
	import { Component } from 'react';
	import type { ColorValue, NativeMethods } from 'react-native';
	import type { ColumnMajorTransformMatrix, TransformProps } from 'react-native-svg/lib/extract/types';
	export interface SVGBoundingBoxOptions {
		fill?: boolean;
		stroke?: boolean;
		markers?: boolean;
		clipped?: boolean;
	}
	export interface DOMPointInit {
		x?: number;
		y?: number;
		z?: number;
		w?: number;
	}
	export interface Point {
		x: number;
		y: number;
	}
	export interface SVGPoint extends Point {
		matrixTransform(matrix: Matrix): SVGPoint;
	}
	export interface Rect {
		x: number;
		y: number;
		width: number;
		height: number;
	}
	export type SVGRect = Rect;
	export interface Matrix {
		a: number;
		b: number;
		c: number;
		d: number;
		e: number;
		f: number;
	}
	export interface SVGMatrix extends Matrix {
		multiply(secondMatrix: Matrix): SVGMatrix;
		inverse(): SVGMatrix;
		translate(x: number, y: number): SVGMatrix;
		scale(scaleFactor: number): SVGMatrix;
		scaleNonUniform(scaleFactorX: number, scaleFactorY: number): SVGMatrix;
		rotate(angle: number): SVGMatrix;
		rotateFromVector(x: number, y: number): SVGMatrix;
		flipX(): SVGMatrix;
		flipY(): SVGMatrix;
		skewX(angle: number): SVGMatrix;
		skewY(angle: number): SVGMatrix;
	}
	export function multiplyMatrices(l: Matrix, r: Matrix): Matrix;
	export function invert({ a, b, c, d, e, f }: Matrix): Matrix;
	export class SVGMatrix implements SVGMatrix {
		constructor(matrix?: Matrix);
	}
	export function matrixTransform(matrix: Matrix, point: Point): Point;
	export class SVGPoint implements SVGPoint {
		constructor(point?: Point);
	}
	export const ownerSVGElement: {
		createSVGPoint(): SVGPoint;
		createSVGMatrix(): SVGMatrix;
	};
	export default class Shape<P> extends Component<P> {
		[x: string]: unknown;
		root: (Shape<P> & NativeMethods) | null;
		constructor(props: Readonly<P> | P);
		refMethod: (instance: (Shape<P> & NativeMethods) | null) => void;
		getNativeScrollRef(): (Shape<P> & NativeMethods) | null;
		setNativeProps: (props: P & {
			matrix?: ColumnMajorTransformMatrix;
			fill?: ColorValue;
		} & TransformProps) => void;
		getBBox: (options?: SVGBoundingBoxOptions) => SVGRect | undefined;
		getCTM: () => SVGMatrix;
		getScreenCTM: () => SVGMatrix;
		isPointInFill: (options: DOMPointInit) => boolean | undefined;
		isPointInStroke: (options: DOMPointInit) => boolean | undefined;
		getTotalLength: () => number | undefined;
		getPointAtLength: (length: number) => SVGPoint;
	}
}

declare module 'react-native-svg/elements/Rect' {
	import * as React from 'react';
	import type { CommonPathProps, NumberProp } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	export interface RectProps extends CommonPathProps {
		x?: NumberProp;
		y?: NumberProp;
		width?: NumberProp;
		height?: NumberProp;
		rx?: NumberProp;
		ry?: NumberProp;
		opacity?: NumberProp;
	}
	export default class Rect extends Shape<RectProps> {
		static displayName: string;
		static defaultProps: {
			x: number;
			y: number;
			width: number;
			height: number;
		};
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Circle' {
	import * as React from 'react';
	import type { CommonPathProps, NumberProp } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	export interface CircleProps extends CommonPathProps {
		cx?: NumberProp;
		cy?: NumberProp;
		opacity?: NumberProp;
		r?: NumberProp;
	}
	export default class Circle extends Shape<CircleProps> {
		static displayName: string;
		static defaultProps: {
			cx: number;
			cy: number;
			r: number;
		};
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Ellipse' {
	import * as React from 'react';
	import type { CommonPathProps, NumberProp } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	export interface EllipseProps extends CommonPathProps {
		cx?: NumberProp;
		cy?: NumberProp;
		opacity?: NumberProp;
		rx?: NumberProp;
		ry?: NumberProp;
	}
	export default class Ellipse extends Shape<EllipseProps> {
		static displayName: string;
		static defaultProps: {
			cx: number;
			cy: number;
			rx: number;
			ry: number;
		};
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Polygon' {
	import * as React from 'react';
	import Shape from 'react-native-svg/elements/Shape';
	import type { CommonPathProps, NumberProp } from 'react-native-svg/lib/extract/types';
	export interface PolygonProps extends CommonPathProps {
		opacity?: NumberProp;
		points?: string | ReadonlyArray<NumberProp>;
	}
	export default class Polygon extends Shape<PolygonProps> {
		static displayName: string;
		static defaultProps: {
			points: string;
		};
		setNativeProps: (props: PolygonProps & {
			d?: string;
		}) => void;
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Polyline' {
	import * as React from 'react';
	import Shape from 'react-native-svg/elements/Shape';
	import type { CommonPathProps, NumberProp } from 'react-native-svg/lib/extract/types';
	export interface PolylineProps extends CommonPathProps {
		opacity?: NumberProp;
		points?: string | ReadonlyArray<NumberProp>;
	}
	export default class Polyline extends Shape<PolylineProps> {
		static displayName: string;
		static defaultProps: {
			points: string;
		};
		setNativeProps: (props: PolylineProps & {
			d?: string;
		}) => void;
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Line' {
	import * as React from 'react';
	import type { CommonPathProps, NumberProp } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	export interface LineProps extends CommonPathProps {
		opacity?: NumberProp;
		x1?: NumberProp;
		x2?: NumberProp;
		y1?: NumberProp;
		y2?: NumberProp;
	}
	export default class Line extends Shape<LineProps> {
		static displayName: string;
		static defaultProps: {
			x1: number;
			y1: number;
			x2: number;
			y2: number;
		};
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Svg' {
	import * as React from 'react';
	import type { ColorValue, MeasureInWindowOnSuccessCallback, MeasureLayoutOnSuccessCallback, MeasureOnSuccessCallback, ViewProps } from 'react-native';
	import type { NumberProp } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	import type { GProps } from 'react-native-svg/elements/G';
	export interface SvgProps extends GProps, ViewProps {
		width?: NumberProp;
		height?: NumberProp;
		viewBox?: string;
		preserveAspectRatio?: string;
		color?: ColorValue;
		title?: string;
	}
	export default class Svg extends Shape<SvgProps> {
		static displayName: string;
		static defaultProps: {
			preserveAspectRatio: string;
		};
		measureInWindow: (callback: MeasureInWindowOnSuccessCallback) => void;
		measure: (callback: MeasureOnSuccessCallback) => void;
		measureLayout: (relativeToNativeNode: number, onSuccess: MeasureLayoutOnSuccessCallback, onFail: () => void) => void;
		setNativeProps: (props: SvgProps & {
			bbWidth?: NumberProp;
			bbHeight?: NumberProp;
		}) => void;
		toDataURL: (callback: (base64: string) => void, options?: object) => void;
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Path' {
	import * as React from 'react';
	import Shape from 'react-native-svg/elements/Shape';
	import type { CommonPathProps, NumberProp } from 'react-native-svg/lib/extract/types';
	export interface PathProps extends CommonPathProps {
		d?: string;
		opacity?: NumberProp;
	}
	export default class Path extends Shape<PathProps> {
		static displayName: string;
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/G' {
	import type { ReactNode } from 'react';
	import * as React from 'react';
	import type { CommonPathProps, FontProps, NumberProp } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	export interface GProps extends CommonPathProps, FontProps {
		children?: ReactNode;
		opacity?: NumberProp;
	}
	export default class G<P> extends Shape<GProps & P> {
		static displayName: string;
		setNativeProps: (props: GProps & P & {
			matrix?: number[];
		}) => void;
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Text' {
	import type { ReactNode } from 'react';
	import * as React from 'react';
	import type { ColumnMajorTransformMatrix, NumberArray, NumberProp, TextSpecificProps } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	import './TSpan';
	export interface TextProps extends TextSpecificProps {
		children?: ReactNode;
		x?: NumberArray;
		y?: NumberArray;
		dx?: NumberArray;
		dy?: NumberArray;
		rotate?: NumberArray;
		opacity?: NumberProp;
		inlineSize?: NumberProp;
	}
	export default class Text extends Shape<TextProps> {
		static displayName: string;
		setNativeProps: (props: TextProps & {
			matrix?: ColumnMajorTransformMatrix;
			style?: [] | unknown;
		}) => void;
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/TSpan' {
	import * as React from 'react';
	import type { TextChild } from 'react-native-svg/lib/extract/extractText';
	import Shape from 'react-native-svg/elements/Shape';
	import type { ColumnMajorTransformMatrix, CommonPathProps, FontProps, NumberArray, NumberProp } from 'react-native-svg/lib/extract/types';
	export interface TSpanProps extends CommonPathProps, FontProps {
		children?: TextChild;
		x?: NumberArray;
		y?: NumberArray;
		dx?: NumberArray;
		dy?: NumberArray;
		rotate?: NumberArray;
		inlineSize?: NumberProp;
	}
	export default class TSpan extends Shape<TSpanProps> {
		static displayName: string;
		setNativeProps: (props: TSpanProps & {
			matrix?: ColumnMajorTransformMatrix;
			style?: [] | unknown;
		}) => void;
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/TextPath' {
	import * as React from 'react';
	import type { ColumnMajorTransformMatrix, NumberProp, TextPathMethod, TextPathMidLine, TextPathSpacing, TextSpecificProps, TransformProps } from 'react-native-svg/lib/extract/types';
	import type { TextChild } from 'react-native-svg/lib/extract/extractText';
	import Shape from 'react-native-svg/elements/Shape';
	export interface TextPathProps extends TextSpecificProps {
		children?: TextChild;
		xlinkHref?: string;
		href?: string;
		startOffset?: NumberProp;
		method?: TextPathMethod;
		spacing?: TextPathSpacing;
		midLine?: TextPathMidLine;
		side?: string;
	}
	export default class TextPath extends Shape<TextPathProps> {
		static displayName: string;
		setNativeProps: (props: object & {
			matrix?: ColumnMajorTransformMatrix;
			style?: [] | unknown;
		} & TransformProps) => void;
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Use' {
	import type { ReactNode } from 'react';
	import * as React from 'react';
	import type { CommonPathProps, NumberProp } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	export interface UseProps extends CommonPathProps {
		children?: ReactNode;
		xlinkHref?: string;
		href?: string;
		width?: NumberProp;
		height?: NumberProp;
		x?: NumberProp;
		y?: NumberProp;
		opacity?: NumberProp;
	}
	export default class Use extends Shape<UseProps> {
		static displayName: string;
		static defaultProps: {
			x: number;
			y: number;
			width: number;
			height: number;
		};
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Image' {
	import * as React from 'react';
	import type { ImageProps as RNImageProps } from 'react-native';
	import type { CommonPathProps, NumberProp } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	export interface ImageProps extends CommonPathProps {
		x?: NumberProp;
		y?: NumberProp;
		width?: NumberProp;
		height?: NumberProp;
		xlinkHref?: RNImageProps['source'] | string;
		href?: RNImageProps['source'] | string;
		preserveAspectRatio?: string;
		opacity?: NumberProp;
	}
	export default class SvgImage extends Shape<ImageProps> {
		static displayName: string;
		static defaultProps: {
			x: number;
			y: number;
			width: number;
			height: number;
			preserveAspectRatio: string;
		};
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Symbol' {
	import type { ReactNode } from 'react';
	import * as React from 'react';
	import Shape from 'react-native-svg/elements/Shape';
	import type { NumberProp } from 'react-native-svg/lib/extract/types';
	export interface SymbolProps {
		children?: ReactNode;
		id?: string;
		viewBox?: string;
		preserveAspectRatio?: string;
		opacity?: NumberProp;
	}
	export default class Symbol extends Shape<SymbolProps> {
		static displayName: string;
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Defs' {
	import * as React from 'react';
	import { Component } from 'react';
	export default class Defs extends Component<React.PropsWithChildren> {
		static displayName: string;
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/LinearGradient' {
	import type { ReactElement } from 'react';
	import * as React from 'react';
	import type { NumberProp, TransformProps, Units } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	export interface LinearGradientProps {
		children?: ReactElement[];
		x1?: NumberProp;
		x2?: NumberProp;
		y1?: NumberProp;
		y2?: NumberProp;
		gradientUnits?: Units;
		gradientTransform?: TransformProps['transform'];
		id?: string;
	}
	export default class LinearGradient extends Shape<LinearGradientProps> {
		static displayName: string;
		static defaultProps: {
			x1: string;
			y1: string;
			x2: string;
			y2: string;
		};
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/RadialGradient' {
	import type { ReactElement } from 'react';
	import * as React from 'react';
	import type { NumberProp, TransformProps, Units } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	export interface RadialGradientProps {
		children?: ReactElement[];
		fx?: NumberProp;
		fy?: NumberProp;
		rx?: NumberProp;
		ry?: NumberProp;
		cx?: NumberProp;
		cy?: NumberProp;
		r?: NumberProp;
		gradientUnits?: Units;
		gradientTransform?: TransformProps['transform'];
		id?: string;
	}
	export default class RadialGradient extends Shape<RadialGradientProps> {
		static displayName: string;
		static defaultProps: {
			cx: string;
			cy: string;
			r: string;
		};
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Stop' {
	import { Component } from 'react';
	import type { ColorValue } from 'react-native';
	import type { NumberProp } from 'react-native-svg/lib/extract/types';
	export interface StopProps {
		stopColor?: ColorValue;
		stopOpacity?: NumberProp;
		offset?: NumberProp;
		parent?: Component;
	}
	export default class Stop extends Component<StopProps> {
		static displayName: string;
		setNativeProps: () => void;
		render(): null;
	}
}

declare module 'react-native-svg/elements/ClipPath' {
	import type { ReactNode } from 'react';
	import * as React from 'react';
	import Shape from 'react-native-svg/elements/Shape';
	export interface ClipPathProps {
		children?: ReactNode;
		id?: string;
	}
	export default class ClipPath extends Shape<ClipPathProps> {
		static displayName: string;
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Pattern' {
	import type { ReactNode } from 'react';
	import * as React from 'react';
	import type { NumberProp, TransformProps, Units } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	export interface PatternProps extends TransformProps {
		children?: ReactNode;
		id?: string;
		x?: NumberProp;
		y?: NumberProp;
		width?: NumberProp;
		height?: NumberProp;
		patternTransform?: TransformProps['transform'];
		patternUnits?: Units;
		patternContentUnits?: Units;
		viewBox?: string;
		preserveAspectRatio?: string;
	}
	export default class Pattern extends Shape<PatternProps> {
		static displayName: string;
		static defaultProps: {
			x: string;
			y: string;
			width: string;
			height: string;
		};
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Mask' {
	import type { ReactNode } from 'react';
	import * as React from 'react';
	import type { CommonPathProps, NumberProp } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	export type TMaskUnits = 'userSpaceOnUse' | 'objectBoundingBox';
	export interface MaskProps extends CommonPathProps {
		children?: ReactNode;
		id?: string;
		x?: NumberProp;
		y?: NumberProp;
		width?: NumberProp;
		height?: NumberProp;
		maskUnits?: TMaskUnits;
		maskContentUnits?: TMaskUnits;
	}
	export default class Mask extends Shape<MaskProps> {
		static displayName: string;
		static defaultProps: {
			x: string;
			y: string;
			width: string;
			height: string;
		};
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/Marker' {
	import type { ReactNode } from 'react';
	import * as React from 'react';
	import type { NumberProp } from 'react-native-svg/lib/extract/types';
	import Shape from 'react-native-svg/elements/Shape';
	export type MarkerUnits = 'strokeWidth' | 'userSpaceOnUse';
	export type Orient = 'auto' | 'auto-start-reverse';
	export interface MarkerProps {
		children?: ReactNode;
		id?: string;
		viewBox?: string;
		preserveAspectRatio?: string;
		refX?: NumberProp;
		refY?: NumberProp;
		markerWidth?: NumberProp;
		markerHeight?: NumberProp;
		markerUnits?: MarkerUnits;
		orient?: Orient | NumberProp;
	}
	export default class Marker extends Shape<MarkerProps> {
		static displayName: string;
		static defaultProps: {
			refX: number;
			refY: number;
			orient: string;
			markerWidth: number;
			markerHeight: number;
			markerUnits: string;
		};
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/elements/ForeignObject' {
	import type { ReactNode } from 'react';
	import * as React from 'react';
	import type { NumberProp } from 'react-native-svg/lib/extract/types';
	import G from 'react-native-svg/elements/G';
	export interface ForeignObjectProps {
		children?: ReactNode;
		x?: NumberProp;
		y?: NumberProp;
		width?: NumberProp;
		height?: NumberProp;
	}
	export default class ForeignObject extends G<ForeignObjectProps> {
		static displayName: string;
		static defaultProps: {
			x: string;
			y: string;
			width: string;
			height: string;
		};
		render(): React.JSX.Element;
	}
}

declare module 'react-native-svg/xml' {
	import type { ComponentType } from 'react';
	import * as React from 'react';
	import { Component } from 'react';
	import type { SvgProps } from 'react-native-svg/elements/Svg';
	export const tags: {
		[tag: string]: ComponentType;
	};
	export interface AST {
		tag: string;
		style?: Styles;
		styles?: string;
		priority?: Map<string, boolean | undefined>;
		parent: AST | null;
		children: (AST | string)[] | (JSX.Element | string)[];
		props: {
			[prop: string]: Styles | string | undefined;
		};
		Tag: ComponentType<React.PropsWithChildren>;
	}
	export interface XmlAST extends AST {
		children: (XmlAST | string)[];
		parent: XmlAST | null;
	}
	export interface JsxAST extends AST {
		children: (JSX.Element | string)[];
	}
	export type AdditionalProps = {
		onError?: (error: Error) => void;
		override?: object;
		onLoad?: () => void;
		fallback?: JSX.Element;
	};
	export type UriProps = SvgProps & {
		uri: string | null;
	} & AdditionalProps;
	export type UriState = {
		xml: string | null;
	};
	export type XmlProps = SvgProps & {
		xml: string | null;
	} & AdditionalProps;
	export type XmlState = {
		ast: JsxAST | null;
	};
	export type AstProps = SvgProps & {
		ast: JsxAST | null;
	} & AdditionalProps;
	export function SvgAst({ ast, override }: AstProps): React.JSX.Element | null;
	export const err: {
		(...data: any[]): void;
		(message?: any, ...optionalParams: any[]): void;
		(message?: any, ...optionalParams: any[]): void;
	};
	export function SvgXml(props: XmlProps): React.JSX.Element | null;
	export function fetchText(uri: string): Promise<string>;
	export function SvgUri(props: UriProps): React.JSX.Element | null;
	export class SvgFromXml extends Component<XmlProps, XmlState> {
		state: {
			ast: null;
		};
		componentDidMount(): void;
		componentDidUpdate(prevProps: {
			xml: string | null;
		}): void;
		parse(xml: string | null): void;
		render(): React.JSX.Element;
	}
	export class SvgFromUri extends Component<UriProps, UriState> {
		state: {
			xml: null;
		};
		componentDidMount(): void;
		componentDidUpdate(prevProps: {
			uri: string | null;
		}): void;
		fetch(uri: string | null): Promise<void>;
		render(): React.JSX.Element;
	}
	export const camelCase: (phrase: string) => string;
	export type Styles = {
		[property: string]: string;
	};
	export function getStyle(string: string): Styles;
	export function astToReact(value: AST | string, index: number): JSX.Element | string;
	export type Middleware = (ast: XmlAST) => XmlAST;
	export function parse(source: string, middleware?: Middleware): JsxAST | null;
}

declare module 'react-native-svg/fabric' {
	import RNSVGCircle from 'react-native-svg/fabric/CircleNativeComponent';
	import RNSVGClipPath from 'react-native-svg/fabric/ClipPathNativeComponent';
	import RNSVGDefs from 'react-native-svg/fabric/DefsNativeComponent';
	import RNSVGEllipse from 'react-native-svg/fabric/EllipseNativeComponent';
	import RNSVGForeignObject from 'react-native-svg/fabric/ForeignObjectNativeComponent';
	import RNSVGGroup from 'react-native-svg/fabric/GroupNativeComponent';
	import RNSVGImage from 'react-native-svg/fabric/ImageNativeComponent';
	import RNSVGLinearGradient from 'react-native-svg/fabric/LinearGradientNativeComponent';
	import RNSVGLine from 'react-native-svg/fabric/LineNativeComponent';
	import RNSVGMarker from 'react-native-svg/fabric/MarkerNativeComponent';
	import RNSVGMask from 'react-native-svg/fabric/MaskNativeComponent';
	import RNSVGPath from 'react-native-svg/fabric/PathNativeComponent';
	import RNSVGPattern from 'react-native-svg/fabric/PatternNativeComponent';
	import RNSVGRadialGradient from 'react-native-svg/fabric/RadialGradientNativeComponent';
	import RNSVGRect from 'react-native-svg/fabric/RectNativeComponent';
	import RNSVGSvgAndroid from 'react-native-svg/fabric/AndroidSvgViewNativeComponent';
	import RNSVGSvgIOS from 'react-native-svg/fabric/IOSSvgViewNativeComponent';
	import RNSVGSymbol from 'react-native-svg/fabric/SymbolNativeComponent';
	import RNSVGText from 'react-native-svg/fabric/TextNativeComponent';
	import RNSVGTextPath from 'react-native-svg/fabric/TextPathNativeComponent';
	import RNSVGTSpan from 'react-native-svg/fabric/TSpanNativeComponent';
	import RNSVGUse from 'react-native-svg/fabric/UseNativeComponent';
	export { RNSVGCircle, RNSVGClipPath, RNSVGDefs, RNSVGEllipse, RNSVGForeignObject, RNSVGGroup, RNSVGImage, RNSVGLinearGradient, RNSVGLine, RNSVGMarker, RNSVGMask, RNSVGPath, RNSVGPattern, RNSVGRadialGradient, RNSVGRect, RNSVGSvgAndroid, RNSVGSvgIOS, RNSVGSymbol, RNSVGText, RNSVGTextPath, RNSVGTSpan, RNSVGUse, };
}

declare module 'react-native-svg/deprecated' {
	export function showErrorCSS(name: string, type: string): never;
	export function SvgCss(): never;
	export function SvgCssUri(): never;
	export function SvgWithCss(): never;
	export function SvgWithCssUri(): never;
	export function inlineStyles(): never;
	export function LocalSvg(): never;
	export function WithLocalSvg(): never;
	export function loadLocalRawResource(): never;
}

declare module 'react-native-svg/lib/extract/types' {
	import type { ColorValue, GestureResponderEvent, GestureResponderHandlers, LayoutChangeEvent, TransformsStyle } from 'react-native';
	import type React from 'react';
	export type NumberProp = string | number;
	export type NumberArray = NumberProp[] | NumberProp;
	export type FillRule = 'evenodd' | 'nonzero';
	export type Units = 'userSpaceOnUse' | 'objectBoundingBox';
	export type TextAnchor = 'start' | 'middle' | 'end';
	export type FontStyle = 'normal' | 'italic' | 'oblique';
	export type FontVariant = 'normal' | 'small-caps';
	export type FontWeight = NumberProp | 'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900';
	export type FontStretch = 'normal' | 'wider' | 'narrower' | 'ultra-condensed' | 'extra-condensed' | 'condensed' | 'semi-condensed' | 'semi-expanded' | 'expanded' | 'extra-expanded' | 'ultra-expanded';
	export type TextDecoration = 'none' | 'underline' | 'overline' | 'line-through' | 'blink';
	export type FontVariantLigatures = 'normal' | 'none';
	export type AlignmentBaseline = 'baseline' | 'text-bottom' | 'alphabetic' | 'ideographic' | 'middle' | 'central' | 'mathematical' | 'text-top' | 'bottom' | 'center' | 'top' | 'text-before-edge' | 'text-after-edge' | 'before-edge' | 'after-edge' | 'hanging';
	export type BaselineShift = 'sub' | 'super' | 'baseline' | ReadonlyArray<NumberProp> | NumberProp;
	export type LengthAdjust = 'spacing' | 'spacingAndGlyphs';
	export type TextPathMethod = 'align' | 'stretch';
	export type TextPathSpacing = 'auto' | 'exact';
	export type TextPathMidLine = 'sharp' | 'smooth';
	export type Linecap = 'butt' | 'square' | 'round';
	export type Linejoin = 'miter' | 'bevel' | 'round';
	export interface TouchableProps {
		disabled?: boolean;
		onPress?: (event: GestureResponderEvent) => void;
		onPressIn?: (event: GestureResponderEvent) => void;
		onPressOut?: (event: GestureResponderEvent) => void;
		onLongPress?: (event: GestureResponderEvent) => void;
		delayPressIn?: number;
		delayPressOut?: number;
		delayLongPress?: number;
	}
	export interface ResponderProps extends GestureResponderHandlers {
		pointerEvents?: 'box-none' | 'none' | 'box-only' | 'auto';
	}
	export interface FillProps {
		fill?: ColorValue;
		fillOpacity?: NumberProp;
		fillRule?: FillRule;
	}
	export interface ClipProps {
		clipRule?: FillRule;
		clipPath?: string;
	}
	export interface VectorEffectProps {
		vectorEffect?: 'none' | 'non-scaling-stroke' | 'nonScalingStroke' | 'default' | 'inherit' | 'uri';
	}
	export interface DefinitionProps {
		id?: string;
	}
	export interface StrokeProps {
		stroke?: ColorValue;
		strokeWidth?: NumberProp;
		strokeOpacity?: NumberProp;
		strokeDasharray?: ReadonlyArray<NumberProp> | NumberProp;
		strokeDashoffset?: NumberProp;
		strokeLinecap?: Linecap;
		strokeLinejoin?: Linejoin;
		strokeMiterlimit?: NumberProp;
		vectorEffect?: VectorEffect;
	}
	export type VectorEffect = 'none' | 'non-scaling-stroke' | 'nonScalingStroke' | 'default' | 'inherit' | 'uri';
	export interface FontObject {
		fontStyle?: FontStyle;
		fontVariant?: FontVariant;
		fontWeight?: FontWeight;
		fontStretch?: FontStretch;
		fontSize?: NumberProp;
		fontFamily?: string;
		textAnchor?: TextAnchor;
		textDecoration?: TextDecoration;
		letterSpacing?: NumberProp;
		wordSpacing?: NumberProp;
		kerning?: NumberProp;
		fontFeatureSettings?: string;
		fontVariantLigatures?: FontVariantLigatures;
		fontVariationSettings?: string;
	}
	export interface FontProps extends FontObject {
		font?: FontObject;
	}
	export type ColumnMajorTransformMatrix = [
		number,
		number,
		number,
		number,
		number,
		number
	];
	export interface TransformProps {
		translate?: NumberArray;
		translateX?: NumberProp;
		translateY?: NumberProp;
		origin?: NumberArray;
		originX?: NumberProp;
		originY?: NumberProp;
		scale?: NumberArray;
		scaleX?: NumberProp;
		scaleY?: NumberProp;
		skew?: NumberArray;
		skewX?: NumberProp;
		skewY?: NumberProp;
		rotation?: NumberProp;
		x?: NumberArray;
		y?: NumberArray;
		transform?: ColumnMajorTransformMatrix | string | TransformsStyle['transform'];
	}
	export interface TransformedProps {
		rotation: number;
		originX: number;
		originY: number;
		scaleX: number;
		scaleY: number;
		skewX: number;
		skewY: number;
		x: number;
		y: number;
	}
	export interface CommonMaskProps {
		mask?: string;
	}
	export interface CommonMarkerProps {
		marker?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
	}
	export interface NativeProps {
		onLayout?: (event: LayoutChangeEvent) => void;
	}
	export interface AccessibilityProps {
		accessibilityLabel?: string;
		accessible?: boolean;
		testID?: string;
	}
	export interface CommonPathProps extends FillProps, StrokeProps, ClipProps, TransformProps, VectorEffectProps, ResponderProps, TouchableProps, DefinitionProps, CommonMarkerProps, CommonMaskProps, NativeProps, AccessibilityProps {
	}
	export type ResponderInstanceProps = {
		touchableHandleResponderMove?: (e: GestureResponderEvent) => void;
		touchableHandleResponderGrant?: (e: GestureResponderEvent) => void;
		touchableHandleResponderRelease?: (e: GestureResponderEvent) => void;
		touchableHandleResponderTerminate?: (e: GestureResponderEvent) => void;
		touchableHandleStartShouldSetResponder?: (e: GestureResponderEvent) => boolean;
		touchableHandleResponderTerminationRequest?: (e: GestureResponderEvent) => boolean;
	};
	export type extractedProps = {
		name?: string;
		mask?: string;
		opacity?: number;
		matrix?: number[];
		propList?: string[];
		onLayout?: (event: LayoutChangeEvent) => void;
		ref?: (instance: React.Component | null) => void;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: number;
		display?: string;
		testID?: string;
		accessibilityLabel?: string;
		accessible?: boolean;
		[touchableProperty: string]: unknown;
	};
	export interface TextSpecificProps extends CommonPathProps, FontProps {
		alignmentBaseline?: AlignmentBaseline;
		baselineShift?: BaselineShift;
		verticalAlign?: NumberProp;
		lengthAdjust?: LengthAdjust;
		textLength?: NumberProp;
		fontData?: null | {
			[name: string]: unknown;
		};
		fontFeatureSettings?: string;
	}
}

declare module 'react-native-svg/lib/extract/extractText' {
	import type { ComponentType } from 'react';
	import * as React from 'react';
	import type { NumberArray, NumberProp } from 'react-native-svg/lib/extract/types';
	interface fontProps {
		fontData?: unknown;
		fontStyle?: string;
		fontVariant?: string;
		fontWeight?: NumberProp;
		fontStretch?: string;
		fontSize?: NumberProp;
		fontFamily?: string;
		textAnchor?: string;
		textDecoration?: string;
		letterSpacing?: NumberProp;
		wordSpacing?: NumberProp;
		kerning?: NumberProp;
		fontFeatureSettings?: string;
		fontVariantLigatures?: string;
		fontVariationSettings?: string;
		font?: string;
	}
	export function extractFont(props: fontProps): {
		[prop: string]: string | null;
	};
	export function setTSpan(TSpanImplementation: ComponentType): void;
	export type TextChild = (undefined | string | number | ComponentType | React.ReactElement) | TextChild[];
	export type TextProps = {
		x?: NumberArray;
		y?: NumberArray;
		dx?: NumberArray;
		dy?: NumberArray;
		rotate?: NumberArray;
		children?: TextChild;
		inlineSize?: NumberProp;
		baselineShift?: NumberProp;
		verticalAlign?: NumberProp;
		alignmentBaseline?: string;
	} & fontProps;
	export default function extractText(props: TextProps, container: boolean): {
		alignmentBaseline: string | undefined;
		font: {
			[prop: string]: string | null;
		};
		x: string[];
		y: string[];
		dx: string[];
		dy: string[];
		rotate: string[];
		content: string | null;
		children: React.JSX.Element | ComponentType | (React.JSX.Element | ComponentType | TextChild[])[] | null | undefined;
	};
	export {};
}

declare module 'react-native-svg/fabric/CircleNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps {
		cx?: string;
		cy?: string;
		r?: string;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/ClipPathNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	type FontObject = Readonly<{
		fontStyle?: string;
		fontVariant?: string;
		fontWeight?: string;
		fontStretch?: string;
		fontSize?: string;
		fontFamily?: string;
		textAnchor?: string;
		textDecoration?: string;
		letterSpacing?: string;
		wordSpacing?: string;
		kerning?: string;
		fontFeatureSettings?: string;
		fontVariantLigatures?: string;
		fontVariationSettings?: string;
	}>;
	interface SvgGroupCommonProps {
		fontSize?: string;
		fontWeight?: string;
		font?: FontObject;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps, SvgGroupCommonProps {
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/DefsNativeComponent' {
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps {
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/EllipseNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps {
		cx?: string;
		cy?: string;
		rx?: string;
		ry?: string;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/ForeignObjectNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	type FontObject = Readonly<{
		fontStyle?: string;
		fontVariant?: string;
		fontWeight?: string;
		fontStretch?: string;
		fontSize?: string;
		fontFamily?: string;
		textAnchor?: string;
		textDecoration?: string;
		letterSpacing?: string;
		wordSpacing?: string;
		kerning?: string;
		fontFeatureSettings?: string;
		fontVariantLigatures?: string;
		fontVariationSettings?: string;
	}>;
	interface SvgGroupCommonProps {
		fontSize?: string;
		fontWeight?: string;
		font?: FontObject;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps, SvgGroupCommonProps {
		x?: string;
		y?: string;
		height?: string;
		width?: string;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/GroupNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	type FontObject = Readonly<{
		fontStyle?: string;
		fontVariant?: string;
		fontWeight?: string;
		fontStretch?: string;
		fontSize?: string;
		fontFamily?: string;
		textAnchor?: string;
		textDecoration?: string;
		letterSpacing?: string;
		wordSpacing?: string;
		kerning?: string;
		fontFeatureSettings?: string;
		fontVariantLigatures?: string;
		fontVariationSettings?: string;
	}>;
	interface SvgGroupCommonProps {
		fontSize?: string;
		fontWeight?: string;
		font?: FontObject;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps, SvgGroupCommonProps {
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/ImageNativeComponent' {
	import type { ColorValue, ImageSourcePropType as ImageSource } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps {
		x?: string;
		y?: string;
		width?: string;
		height?: string;
		src?: ImageSource | null;
		align?: string;
		meetOrSlice?: Int32;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/LinearGradientNativeComponent' {
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps {
		x1?: string;
		y1?: string;
		x2?: string;
		y2?: string;
		gradient?: ReadonlyArray<Float>;
		gradientUnits?: Int32;
		gradientTransform?: ReadonlyArray<Float> | null;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/LineNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps {
		x1?: string;
		y1?: string;
		x2?: string;
		y2?: string;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/MarkerNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	type FontObject = Readonly<{
		fontStyle?: string;
		fontVariant?: string;
		fontWeight?: string;
		fontStretch?: string;
		fontSize?: string;
		fontFamily?: string;
		textAnchor?: string;
		textDecoration?: string;
		letterSpacing?: string;
		wordSpacing?: string;
		kerning?: string;
		fontFeatureSettings?: string;
		fontVariantLigatures?: string;
		fontVariationSettings?: string;
	}>;
	interface SvgGroupCommonProps {
		fontSize?: string;
		fontWeight?: string;
		font?: FontObject;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps, SvgGroupCommonProps {
		refX?: string;
		refY?: string;
		markerHeight?: string;
		markerWidth?: string;
		markerUnits?: string;
		orient?: string;
		minX?: Float;
		minY?: Float;
		vbWidth?: Float;
		vbHeight?: Float;
		align?: string;
		meetOrSlice?: Int32;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/MaskNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	type FontObject = Readonly<{
		fontStyle?: string;
		fontVariant?: string;
		fontWeight?: string;
		fontStretch?: string;
		fontSize?: string;
		fontFamily?: string;
		textAnchor?: string;
		textDecoration?: string;
		letterSpacing?: string;
		wordSpacing?: string;
		kerning?: string;
		fontFeatureSettings?: string;
		fontVariantLigatures?: string;
		fontVariationSettings?: string;
	}>;
	interface SvgGroupCommonProps {
		fontSize?: string;
		fontWeight?: string;
		font?: FontObject;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps, SvgGroupCommonProps {
		x?: string;
		y?: string;
		height?: string;
		width?: string;
		maskUnits?: Int32;
		maskContentUnits?: Int32;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/PathNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps {
		d?: string;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/PatternNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float> | null;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	type FontObject = Readonly<{
		fontStyle?: string;
		fontVariant?: string;
		fontWeight?: string;
		fontStretch?: string;
		fontSize?: string;
		fontFamily?: string;
		textAnchor?: string;
		textDecoration?: string;
		letterSpacing?: string;
		wordSpacing?: string;
		kerning?: string;
		fontFeatureSettings?: string;
		fontVariantLigatures?: string;
		fontVariationSettings?: string;
	}>;
	interface SvgGroupCommonProps {
		fontSize?: string;
		fontWeight?: string;
		font?: FontObject;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps, SvgGroupCommonProps {
		x?: string;
		y?: string;
		height?: string;
		width?: string;
		patternUnits?: Int32;
		patternContentUnits?: Int32;
		patternTransform?: ReadonlyArray<Float> | null;
		minX?: Float;
		minY?: Float;
		vbWidth?: Float;
		vbHeight?: Float;
		align?: string;
		meetOrSlice?: Int32;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/RadialGradientNativeComponent' {
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps {
		fx?: string;
		fy?: string;
		cx?: string;
		cy?: string;
		rx?: string;
		ry?: string;
		gradient?: ReadonlyArray<Float>;
		gradientUnits?: Int32;
		gradientTransform?: ReadonlyArray<Float> | null;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/RectNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps {
		x?: string;
		y?: string;
		height?: string;
		width?: string;
		rx?: string;
		ry?: string;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/AndroidSvgViewNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Double, Float, Int32 } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	type NativeBackgroundProp = Readonly<{
		type?: string;
		color?: Float;
		borderless?: boolean;
		rippleRadius?: Float;
	}>;
	type HitSlop = Readonly<{
		left?: Float;
		top?: Float;
		right?: Float;
		bottom?: Float;
	}>;
	interface NativeProps extends ViewProps {
		bbWidth?: string;
		bbHeight?: string;
		minX?: Float;
		minY?: Float;
		vbWidth?: Float;
		vbHeight?: Float;
		align?: string;
		meetOrSlice?: Int32;
		tintColor?: ColorValue;
		color?: ColorValue;
		pointerEvents?: string;
		hasTVPreferredFocus?: boolean;
		borderTopEndRadius?: Float;
		borderBottomStartRadius?: Float;
		borderBottomColor?: ColorValue;
		nextFocusDown?: Int32;
		borderRightColor?: ColorValue;
		nextFocusRight?: Int32;
		borderLeftColor?: ColorValue;
		borderColor?: ColorValue;
		removeClippedSubviews?: boolean;
		nextFocusForward?: Int32;
		nextFocusUp?: Int32;
		accessible?: boolean;
		borderStartColor?: ColorValue;
		borderBottomEndRadius?: Float;
		borderEndColor?: ColorValue;
		focusable?: boolean;
		nativeBackgroundAndroid?: NativeBackgroundProp;
		borderTopStartRadius?: Float;
		nativeForegroundAndroid?: NativeBackgroundProp;
		backfaceVisibility?: string;
		borderStyle?: string;
		needsOffscreenAlphaCompositing?: boolean;
		hitSlop?: HitSlop;
		borderTopColor?: ColorValue;
		nextFocusLeft?: Int32;
		borderTopRightRadius?: Double;
		borderBottomRightRadius?: Double;
		borderRadius?: Double;
		borderBottomLeftRadius?: Double;
		borderTopLeftRadius?: Double;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/IOSSvgViewNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32 } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface NativeProps extends ViewProps {
		bbWidth?: string;
		bbHeight?: string;
		minX?: Float;
		minY?: Float;
		vbWidth?: Float;
		vbHeight?: Float;
		align?: string;
		meetOrSlice?: Int32;
		tintColor?: ColorValue;
		color?: ColorValue;
		pointerEvents?: string;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/SymbolNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	type FontObject = Readonly<{
		fontStyle?: string;
		fontVariant?: string;
		fontWeight?: string;
		fontStretch?: string;
		fontSize?: string;
		fontFamily?: string;
		textAnchor?: string;
		textDecoration?: string;
		letterSpacing?: string;
		wordSpacing?: string;
		kerning?: string;
		fontFeatureSettings?: string;
		fontVariantLigatures?: string;
		fontVariationSettings?: string;
	}>;
	interface SvgGroupCommonProps {
		fontSize?: string;
		fontWeight?: string;
		font?: FontObject;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps, SvgGroupCommonProps {
		minX?: Float;
		minY?: Float;
		vbWidth?: Float;
		vbHeight?: Float;
		align?: string;
		meetOrSlice?: Int32;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/TextNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	type FontObject = Readonly<{
		fontStyle?: string;
		fontVariant?: string;
		fontWeight?: string;
		fontStretch?: string;
		fontSize?: string;
		fontFamily?: string;
		textAnchor?: string;
		textDecoration?: string;
		letterSpacing?: string;
		wordSpacing?: string;
		kerning?: string;
		fontFeatureSettings?: string;
		fontVariantLigatures?: string;
		fontVariationSettings?: string;
	}>;
	interface SvgGroupCommonProps {
		fontSize?: string;
		fontWeight?: string;
		font?: FontObject;
	}
	interface SvgTextCommonProps {
		dx?: ReadonlyArray<string>;
		dy?: ReadonlyArray<string>;
		x?: ReadonlyArray<string>;
		y?: ReadonlyArray<string>;
		rotate?: ReadonlyArray<string>;
		inlineSize?: string;
		textLength?: string;
		baselineShift?: string;
		lengthAdjust?: string;
		alignmentBaseline?: string;
		verticalAlign?: string;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps, SvgGroupCommonProps, SvgTextCommonProps {
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/TextPathNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	type FontObject = Readonly<{
		fontStyle?: string;
		fontVariant?: string;
		fontWeight?: string;
		fontStretch?: string;
		fontSize?: string;
		fontFamily?: string;
		textAnchor?: string;
		textDecoration?: string;
		letterSpacing?: string;
		wordSpacing?: string;
		kerning?: string;
		fontFeatureSettings?: string;
		fontVariantLigatures?: string;
		fontVariationSettings?: string;
	}>;
	interface SvgGroupCommonProps {
		fontSize?: string;
		fontWeight?: string;
		font?: FontObject;
	}
	interface SvgTextCommonProps {
		dx?: ReadonlyArray<string>;
		dy?: ReadonlyArray<string>;
		x?: ReadonlyArray<string>;
		y?: ReadonlyArray<string>;
		rotate?: ReadonlyArray<string>;
		inlineSize?: string;
		textLength?: string;
		baselineShift?: string;
		lengthAdjust?: string;
		alignmentBaseline?: string;
		verticalAlign?: string;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps, SvgGroupCommonProps, SvgTextCommonProps {
		href?: string;
		side?: string;
		method?: string;
		midLine?: string;
		spacing?: string;
		startOffset?: string;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/TSpanNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	type FontObject = Readonly<{
		fontStyle?: string;
		fontVariant?: string;
		fontWeight?: string;
		fontStretch?: string;
		fontSize?: string;
		fontFamily?: string;
		textAnchor?: string;
		textDecoration?: string;
		letterSpacing?: string;
		wordSpacing?: string;
		kerning?: string;
		fontFeatureSettings?: string;
		fontVariantLigatures?: string;
		fontVariationSettings?: string;
	}>;
	interface SvgGroupCommonProps {
		fontSize?: string;
		fontWeight?: string;
		font?: FontObject;
	}
	interface SvgTextCommonProps {
		dx?: ReadonlyArray<string>;
		dy?: ReadonlyArray<string>;
		x?: ReadonlyArray<string>;
		y?: ReadonlyArray<string>;
		rotate?: ReadonlyArray<string>;
		inlineSize?: string;
		textLength?: string;
		baselineShift?: string;
		lengthAdjust?: string;
		alignmentBaseline?: string;
		verticalAlign?: string;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps, SvgGroupCommonProps, SvgTextCommonProps {
		content?: string;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/UseNativeComponent' {
	import type { ColorValue } from 'react-native';
	import type { Float, Int32, WithDefault } from 'react-native/Libraries/Types/CodegenTypes';
	import type { ViewProps } from 'react-native-svg/fabric/utils';
	interface SvgNodeCommonProps {
		name?: string;
		opacity?: WithDefault<Float, 1.0>;
		matrix?: ReadonlyArray<Float>;
		mask?: string;
		markerStart?: string;
		markerMid?: string;
		markerEnd?: string;
		clipPath?: string;
		clipRule?: WithDefault<Int32, 0>;
		responsible?: boolean;
		display?: string;
		pointerEvents?: string;
	}
	type ColorStruct = Readonly<{
		type?: WithDefault<Int32, -1>;
		payload?: ColorValue;
		brushRef?: string;
	}>;
	interface SvgRenderableCommonProps {
		fill?: ColorStruct;
		fillOpacity?: WithDefault<Float, 1.0>;
		fillRule?: WithDefault<Int32, 1>;
		stroke?: ColorStruct;
		strokeOpacity?: WithDefault<Float, 1.0>;
		strokeWidth?: WithDefault<string, '1'>;
		strokeLinecap?: WithDefault<Int32, 0>;
		strokeLinejoin?: WithDefault<Int32, 0>;
		strokeDasharray?: ReadonlyArray<string>;
		strokeDashoffset?: Float;
		strokeMiterlimit?: Float;
		vectorEffect?: WithDefault<Int32, 0>;
		propList?: ReadonlyArray<string>;
	}
	interface NativeProps extends ViewProps, SvgNodeCommonProps, SvgRenderableCommonProps {
		href?: string;
		x?: string;
		y?: string;
		height?: string;
		width?: string;
	}
	const _default: import("react-native/Libraries/Utilities/codegenNativeComponent").NativeComponentType<NativeProps>;
	export default _default;
}

declare module 'react-native-svg/fabric/utils' {
	import type { ViewProps as VP } from 'react-native';
	type ViewProps = Omit<VP, 'pointerEvents'>;
	export type { ViewProps };
}

